{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/views/IpDetails.vue?4ac6","webpack:///./src/assets/ipclassifier2.png","webpack:///./src/assets/ipclassifier.png","webpack:///./src/App.vue?ae42","webpack:///./src/components/Nav.vue?b645","webpack:///src/components/Nav.vue","webpack:///./src/components/Nav.vue?bc47","webpack:///./src/components/Nav.vue","webpack:///src/App.vue","webpack:///./src/App.vue?a7d1","webpack:///./src/App.vue","webpack:///./src/views/HelloPage.vue?5bd1","webpack:///src/views/HelloPage.vue","webpack:///./src/views/HelloPage.vue?72f7","webpack:///./src/views/HelloPage.vue","webpack:///./src/views/IpClass.vue?414b","webpack:///./src/utils/conversion/bin2dec.js","webpack:///./src/utils/judgeType/index.js","webpack:///./src/utils/conversion/dec2bin.js","webpack:///./src/utils/pretty/spliter.js","webpack:///./src/utils/pretty/joiner.js","webpack:///./src/utils/ip_related/ipClassifier.js","webpack:///./src/utils/pretty/patchZero.js","webpack:///./src/utils/ip_related/bin_ip_address.js","webpack:///./src/utils/ip_related/dec_ip_address.js","webpack:///./src/utils/mask_related/standard_mask.js","webpack:///./src/utils/subnet_related/bits_of_subnet.js","webpack:///./src/utils/subnet_related/num_of_subnet.js","webpack:///./src/utils/ip_related/standard_host_number.js","webpack:///./src/utils/subnet_related/bits_of_hosts.js","webpack:///./src/utils/AND_operation/index.js","webpack:///./src/utils/subnet_related/host_number_in_bin.js","webpack:///./src/utils/subnet_related/host_address_dec.js","webpack:///./src/utils/throttle/index.js","webpack:///./src/utils/bit_combination_generator/index.js","webpack:///./src/utils/array_vector/one_to_two.js","webpack:///./src/utils/the_scale_of_host_address/index.js","webpack:///./src/utils/subnet_related/required_bits_for_subnets.js","webpack:///./src/utils/pretty/array_remove_duplicates.js","webpack:///./src/utils/index.js","webpack:///src/views/IpClass.vue","webpack:///./src/views/IpClass.vue?9e3f","webpack:///./src/views/IpClass.vue","webpack:///./src/views/IpDetails.vue?b577","webpack:///src/views/IpDetails.vue","webpack:///./src/views/IpDetails.vue?02a3","webpack:///./src/views/IpDetails.vue","webpack:///./src/views/IsSameNet.vue?4e51","webpack:///src/views/IsSameNet.vue","webpack:///./src/views/IsSameNet.vue?4455","webpack:///./src/views/IsSameNet.vue","webpack:///./src/views/NetConfigGen.vue?bff9","webpack:///src/views/NetConfigGen.vue","webpack:///./src/views/NetConfigGen.vue?e610","webpack:///./src/views/NetConfigGen.vue","webpack:///./src/views/Subnetting.vue?75ec","webpack:///src/views/Subnetting.vue","webpack:///./src/views/Subnetting.vue?9d2e","webpack:///./src/views/Subnetting.vue","webpack:///./src/views/subnetting-processes/Process1.vue?7a2d","webpack:///src/views/subnetting-processes/Process1.vue","webpack:///./src/views/subnetting-processes/Process1.vue?a55e","webpack:///./src/views/subnetting-processes/Process1.vue","webpack:///./src/views/subnetting-processes/Process2.vue?0d6d","webpack:///src/views/subnetting-processes/Process2.vue","webpack:///./src/views/subnetting-processes/Process2.vue?044e","webpack:///./src/views/subnetting-processes/Process2.vue","webpack:///./src/views/subnetting-processes/Process3.vue?6343","webpack:///src/views/subnetting-processes/Process3.vue","webpack:///./src/views/subnetting-processes/Process3.vue?5106","webpack:///./src/views/subnetting-processes/Process3.vue","webpack:///./src/router/index.js","webpack:///./src/store/actions.js","webpack:///./src/store/state.js","webpack:///./src/store/mutations.js","webpack:///./src/store/getters.js","webpack:///./src/store/index.js","webpack:///./src/main.js","webpack:///./src/components/Nav.vue?0672","webpack:///./src/App.vue?74c1","webpack:///./src/views/subnetting-processes/Process3.vue?bc96","webpack:///./src/views/IsSameNet.vue?0ff2","webpack:///./src/views/NetConfigGen.vue?cda4","webpack:///./src/views/Subnetting.vue?ef4f","webpack:///./src/views/HelloPage.vue?f3f1","webpack:///./src/views/subnetting-processes/Process1.vue?19de","webpack:///./src/views/subnetting-processes/Process2.vue?2427","webpack:///./src/views/IpClass.vue?a32a"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","_vm","this","_h","$createElement","_c","_self","attrs","staticRenderFns","staticClass","default_active","_l","nav","index","class","hello_page_style","_v","_s","title","staticStyle","subtitle","component","_m","model","callback","$$v","binOrdec","expression","ref","maxlength","ip_address","directives","rawName","ipClass","bin_String","dec_String","Number","toString","obj","target","bin_string","judgeType","isNaN","remainder","parseInt","unshift","forEach","digit","origin","split","join","ip","ip_fragment","utils","address_spliter","dec2bin","patchZero","location_of_zero","indexOf","bin","bin_arr","len","dec_ip","bin_ip_address_array","map","fragment","need_patchZero","bin_ip_address","address_joiner","bin_ip","dec_ip_address_array","bin2dec","dec_ip_address","A","mask","flag","B","C","standard_mask","counter","mask_dec_arr","spliter","need_to_patch","bit_arr","filter","bit","bits_of_subnet","old_router","new_router","num1","num2","standard_host_number","ip_bin","mask_bin","ip_bin_arr","mask_bin_arr","fin","ip_bit_arr","mask_bit_arr","and_results","bit2","and_result","bits_arr","joiner","ip_in_bin","mask_arr_in_bin","mask_after_reverse","container","mask_bit_reverse","AND_operation","network_address_dec","ipClassifier","fin_flag","network_address_dec_arr","begin","change","end","from","to","cb","time","timer_saver","args","isLocked","args_for_cb","Array","arguments","setTimeout","clearTimeout","bit_combination_generator","arr","printTheArray","single_result","num","v","required_bits_for_subnet","bin_ip_address_arr","cur_fragment","cur_fragment_arr","host_address_end","require_host_nums","origin_host_bits","host_bits","Math","ceil","log2","Set","num_of_subnet","bits_of_hosts","host_number_in_bin","host_address_dec","throttle","arr_vector_one_to_two","calc_host_address","required_bits_for_subnets_from_host_nums","array_remove_duplicates","style","marginLeft","suggestions","subnet_mask","item","label","ip_address1","subnet_mask1","network_address_1","ip_address2","subnet_mask2","network_address_2","undefined","isSameNetWork","active","subnet_type","on","$event","next","pre","_e","width","required_subnets_num","_n","hosts_num_in_each_subnet","type1_network_address","type2_dataTable","backgroundColor","color","type3_dataTable","table_datas_from_hosts_num_in_each_subnet","type4_dataTable","Vue","use","VueRouter","routes","path","HelloPage","IpClass","IpDetails","IsSameNet","Subnetting","redirect","children","Process1","Process2","Process3","NetConfigGen","router","state","e","Message","closeAll","message","type","duration","showClose","convert_ip_address","error","getters","host_number_in_dec","hosts","useful_hosts","network_address_bin","subnet_mask_arr","host_address_bin","start_and_end_Arr","start","calc_network_address","ip_address_bin","calc_the_num_of_subnets_and_its_network_address","final_results","ip_address_bin_arr","bit_is_one_counter","bit_combine_arr","combine","type2_dataTable2","serial_num","cur","decompose","cur_subnet_network_address","network_address","required_bit","temp_mask_bin_arr","patcher","the_scale_of_host_address","calc_mask","mask_after_calc","hosts_num_in_each_subnet_arr","JSON","parse","bits_of_subnet_Arr","host_num","num_of_subnets_bits","network_addresses_container","cur_network_address","required_host_num","need_to_repair","subnet","the_scale_of_host_address_Arr","scale","repair","scale_arr","thisArr","lastest_pos","next_subnet","gap","set","Vuex","Store","actions","mutations","ElementUI","config","productionTip","store","render","h","App","$mount"],"mappings":"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","file":"js/app.227c7647.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"app\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,\"chunk-vendors\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--10-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--10-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--10-oneOf-1-2!../../node_modules/less-loader/dist/cjs.js??ref--10-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./IpDetails.vue?vue&type=style&index=0&id=e6c8d2c0&lang=less&scoped=true&\"","module.exports = __webpack_public_path__ + \"img/ipclassifier2.9879d7a9.png\";","module.exports = __webpack_public_path__ + \"img/ipclassifier.1918d71d.png\";","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{\"id\":\"app\"}},[_c('el-container',[_c('el-header',{attrs:{\"height\":\"65px\"}},[_c('Nav')],1),_c('el-main',[_c('router-view')],1)],1)],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('el-menu',{staticClass:\"el-menu-demo\",attrs:{\"mode\":\"horizontal\",\"text-color\":\"#409eff\",\"active-text-color\":\"#42b983\",\"default-active\":_vm.default_active,\"router\":true}},_vm._l((_vm.navs),function(nav){return _c('el-menu-item',{key:nav.index,class:{ hello_page_style: nav.index === '/helloPage' },attrs:{\"index\":nav.index}},[_vm._v(\" \"+_vm._s(nav.title)+\" \"),_c('span',{staticStyle:{\"color\":\"red\"}},[_vm._v(_vm._s(nav.subtitle))])])}),1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <el-menu class=\"el-menu-demo\" mode=\"horizontal\" text-color=\"#409eff\" active-text-color=\"#42b983\" :default-active=\"default_active\" :router=\"true\">\r\n        <el-menu-item\r\n            v-for=\"nav in navs\"\r\n            :index=\"nav.index\"\r\n            :key=\"nav.index\"\r\n            :class=\"{ hello_page_style: nav.index === '/helloPage' }\"\r\n        >\r\n            {{ nav.title }}\r\n            <span style=\"color: red;\">{{ nav.subtitle }}</span>\r\n        </el-menu-item>\r\n    </el-menu>\r\n</template>\r\n\r\n<script>\r\n    export default {\r\n        name: 'Nav', // 指定组件名\r\n        data() {\r\n            return {\r\n                navs: [\r\n                    {\r\n                        index: '/helloPage',\r\n                        title: '计算机网络工具',\r\n                        subtitle: '',\r\n                    },\r\n                    {\r\n                        index: '/ipClass',\r\n                        title: '判断IP地址类型',\r\n                    },\r\n                    {\r\n                        index: '/ipDetails',\r\n                        title: 'IP地址详情',\r\n                        subtitle: '(需要子网掩码)',\r\n                    },\r\n                    {\r\n                        index: '/isSameNet',\r\n                        title: '判断两个IP是否属于同一个网络',\r\n                        subtitle: '',\r\n                    },\r\n                    {\r\n                        index: '/subnetting',\r\n                        title: '子网划分',\r\n                        subtitle: '',\r\n                    },\r\n                    {\r\n                        index: '/netConfigGen',\r\n                        title: '局域网配置生成器',\r\n                        subtitle: '(正在开发中...)',\r\n                    },\r\n                ],\r\n                default_active: \"\",\r\n            }\r\n        },\r\n        watch: {\r\n            $route: {\r\n                immediate: true,\r\n                handler(cur_route) {\r\n                    let index = cur_route.matched?.[0]?.path\r\n                    if (index) {\r\n                        this.default_active = index\r\n                    }else {\r\n                        this.$router.push({name: \"HelloPage\"})\r\n                    }\r\n                }\r\n            }\r\n        },\r\n    }\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n    .el-menu {\r\n        width: 95%;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: space-between;\r\n    }\r\n    .el-menu-item {\r\n        flex-grow: 1;\r\n        flex-shrink: 0;\r\n        font-weight: bold;\r\n        font-size: 15px;\r\n        &:first-of-type {\r\n            font-size: 25px;\r\n            position: relative;\r\n            left: -30px;\r\n            top: 0;\r\n        }\r\n    }\r\n\r\n    .hello_page_style {\r\n        color: black !important;\r\n        border: none !important;\r\n    }\r\n</style>\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Nav.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Nav.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Nav.vue?vue&type=template&id=5c28dd22&scoped=true&\"\nimport script from \"./Nav.vue?vue&type=script&lang=js&\"\nexport * from \"./Nav.vue?vue&type=script&lang=js&\"\nimport style0 from \"./Nav.vue?vue&type=style&index=0&id=5c28dd22&lang=less&scoped=true&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"5c28dd22\",\n  null\n  \n)\n\nexport default component.exports","<template>\r\n    <div id=\"app\">\r\n        <el-container>\r\n            <el-header height=\"65px\">\r\n                <Nav />\r\n            </el-header>\r\n            <el-main>\r\n                <router-view></router-view>\r\n            </el-main>\r\n        </el-container>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import Nav from \"./components/Nav.vue\"\r\n    export default {\r\n        name: \"App\",\r\n        data() {\r\n            return {\r\n\r\n            }\r\n        },\r\n        components: {\r\n            Nav,\r\n        }\r\n    }\r\n</script>\r\n\r\n<style lang=\"less\">\r\n    #app {\r\n        font-family: Avenir, Helvetica, Arial, sans-serif;\r\n        -webkit-font-smoothing: antialiased;\r\n        -moz-osx-font-smoothing: grayscale;\r\n        text-align: center;\r\n    }\r\n</style>\r\n","import mod from \"-!../node_modules/cache-loader/dist/cjs.js??ref--12-0!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../node_modules/cache-loader/dist/cjs.js??ref--12-0!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./App.vue?vue&type=template&id=49748092&\"\nimport script from \"./App.vue?vue&type=script&lang=js&\"\nexport * from \"./App.vue?vue&type=script&lang=js&\"\nimport style0 from \"./App.vue?vue&type=style&index=0&lang=less&\"\n\n\n/* normalize component */\nimport normalizer from \"!../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{\"id\":\"hello\"}},[_c('div',[_vm._v(\"hi!👋 欢迎使用该工具辅助您学习计算机网络😁\")]),_c('div',[_vm._v(\"Author: ChinaFitz\")]),_c('div',[_c('span',[_vm._v(\"个人前端学习博客: \")]),_c('el-link',{staticStyle:{\"font-size\":\"16px\",\"font-weight\":\"bold\"},attrs:{\"type\":\"primary\",\"href\":\"https://www.cnblogs.com/fitzlovecode/\"}},[_vm._v(\" 博客园 \")])],1),_c('div',[_c('span',[_vm._v(\"Gitee地址: \")]),_c('el-link',{staticStyle:{\"font-size\":\"16px\",\"font-weight\":\"bold\"},attrs:{\"type\":\"primary\",\"href\":\"https://github.com/ChinaFitz/\"}},[_vm._v(\" https://gitee.com/chinafitz \")])],1),_c('div',[_c('span',[_vm._v(\"Github地址: \")]),_c('el-link',{staticStyle:{\"font-size\":\"16px\",\"font-weight\":\"bold\"},attrs:{\"type\":\"primary\",\"href\":\"https://github.com/ChinaFitz/\"}},[_vm._v(\" https://github.com/ChinaFitz \")])],1)])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <div id=\"hello\">\r\n        <div>hi!👋 欢迎使用该工具辅助您学习计算机网络😁</div>\r\n        <div>Author: ChinaFitz</div>\r\n        <div>\r\n            <span>个人前端学习博客: </span>\r\n            <el-link\r\n                type=\"primary\"\r\n                href=\"https://www.cnblogs.com/fitzlovecode/\"\r\n                style=\"font-size: 16px; font-weight: bold;\"\r\n            >\r\n                博客园\r\n            </el-link>\r\n        </div>\r\n        <div>\r\n            <span>Gitee地址: </span>\r\n            <el-link type=\"primary\" href=\"https://github.com/ChinaFitz/\" style=\"font-size: 16px; font-weight: bold;\">\r\n                https://gitee.com/chinafitz\r\n            </el-link>\r\n        </div>\r\n        <div>\r\n            <span>Github地址: </span>\r\n            <el-link type=\"primary\" href=\"https://github.com/ChinaFitz/\" style=\"font-size: 16px; font-weight: bold;\">\r\n                https://github.com/ChinaFitz\r\n            </el-link>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n\r\n    export default {\r\n        name: \"HelloPage\", // 指定组件名\r\n        data: function () {\r\n            return {\r\n\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n    #hello {\r\n        width: 100%;\r\n        height: 100%;\r\n        font-size: 20px;\r\n        margin-top: 14%;\r\n\r\n        > div {\r\n            margin: 10px 0;\r\n        }\r\n    }\r\n</style>\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./HelloPage.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./HelloPage.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./HelloPage.vue?vue&type=template&id=388180a2&scoped=true&\"\nimport script from \"./HelloPage.vue?vue&type=script&lang=js&\"\nexport * from \"./HelloPage.vue?vue&type=script&lang=js&\"\nimport style0 from \"./HelloPage.vue?vue&type=style&index=0&id=388180a2&lang=less&scoped=true&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"388180a2\",\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_vm._m(0),_c('el-divider'),_c('div',{attrs:{\"id\":\"main\"}},[_c('div',{attrs:{\"id\":\"switch\"}},[_c('el-switch',{attrs:{\"inactive-text\":\"十进制\",\"active-text\":\"二进制\",\"active-color\":\"#ff4949\"},model:{value:(_vm.binOrdec),callback:function ($$v) {_vm.binOrdec=$$v},expression:\"binOrdec\"}})],1),_vm._v(\"      \"),_c('label',{attrs:{\"for\":\"ip\"}},[_vm._v(\"ip地址: \")]),_c('el-input',{ref:\"el_input\",attrs:{\"id\":\"ip\",\"type\":\"text\",\"placeholder\":\"请输入IP地址\",\"maxlength\":_vm.maxlength,\"show-word-limit\":\"\",\"clearable\":true},model:{value:(_vm.ip_address),callback:function ($$v) {_vm.ip_address=$$v},expression:\"ip_address\"}}),_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.ipClass),expression:\"ipClass\"}],attrs:{\"id\":\"result\"}},[_vm._v(\"这是一个 \"+_vm._s(_vm.ipClass)+\" 类地址\")])],1)],1)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{\"id\":\"pics\"}},[_c('img',{attrs:{\"src\":require(\"../assets/ipclassifier.png\")}}),_c('img',{attrs:{\"src\":require(\"../assets/ipclassifier2.png\")}})])}]\n\nexport { render, staticRenderFns }","/*\r\n    @author:  Fitz\r\n    @name:  bin2dec\r\n    @description:  二进制转十进制\r\n    @parms:  String\r\n    @return:  String\r\n*/\r\nexport default function (bin_String) {\r\n    let dec_String = Number(`0b${bin_String}`)\r\n    return dec_String.toString()\r\n}\r\n","/*\r\n    @author:  Fitz\r\n    @name:  judgeType\r\n    @description:  判断对象的数据类型\r\n    @parms:  Object\r\n    @return:  String\r\n*/\r\nexport default obj => {\r\n    switch (Object.prototype.toString.call(obj)) {\r\n        case '[object String]':\r\n            return 'String'\r\n        case '[object Number]':\r\n            return 'Number'\r\n        case '[object Boolean]':\r\n            return 'Boolean'\r\n        case '[object Null]':\r\n            return 'Null'\r\n        case '[object Undefined]':\r\n            return 'Undefined'\r\n        case '[object Array]':\r\n            return 'Array'\r\n        case '[object Object]':\r\n            return 'Object'\r\n        case '[object Function]':\r\n            return 'Function'\r\n        case '[object Symbol]':\r\n            return 'Symbol'\r\n        case '[object Set]':\r\n            return 'Set'\r\n        case '[object Map]':\r\n            return 'Map'\r\n    }\r\n}\r\n","import judgeType from '../judgeType'\r\n/*\r\n    @author:  Fitz\r\n    @name:  dec2bin\r\n    @description:  十进制转二进制\r\n    @parms:  String\r\n    @return:  String\r\n*/\r\nexport default function (dec_String) {\r\n    let target\r\n    let bin_string = ''\r\n    let result = []\r\n\r\n    if (judgeType(dec_String) === 'Number') {\r\n        target = dec_String\r\n    } else {\r\n        target = Number(dec_String)\r\n    }\r\n\r\n    if (Number.isNaN(target) || judgeType(target) === 'Undefined') {\r\n        target = 0\r\n        result.push(target)\r\n    }\r\n\r\n    while (target !== 0) {\r\n        let remainder = target % 2\r\n        target = parseInt(target / 2)\r\n        result.unshift(remainder)\r\n    }\r\n\r\n    result.forEach(digit => {\r\n        bin_string += digit\r\n    })\r\n\r\n    return bin_string\r\n}\r\n","/*\r\n    @author:  Fitz\r\n    @name:  address_spliter\r\n    @description:  将ip地址或子网掩码通过点分的方法, 分解成包含4个元素的数组\r\n    @parms:  String ip地址或子网掩码    例子: 192.168.1.1\r\n    @return:  Array ip地址或子网掩码被分解后的数组  例子: [\"192\", \"168\", \"1\", \"1\"]\r\n*/\r\n\r\nexport default function (origin) {\r\n    return origin.split('.')\r\n}\r\n","/*\r\n    @author:  Fitz\r\n    @name:  address_joiner\r\n    @description:  将ip地址或子网掩码的数组形式还原成点分法的字符串形式\r\n    @parms:  Array ip地址或子网掩码的数组形式  例子: [\"192\", \"168\", \"1\", \"1\"]\r\n    @return:  String ip地址或子网掩码点分法的字符串形式 例子: 192.168.1.1\r\n*/\r\n\r\nexport default function (origin) {\r\n    return origin.join('.')\r\n}\r\n","import utils from '../index'\r\n\r\n/*\r\n    @author:  Fitz\r\n    @name:  ipClassifier\r\n    @description:  ip地址分类器\r\n    @parms:  String ip地址, Bool ip地址的进制(false=>十进制    true=>二进制)\r\n    @return:  String 分类(A-E)\r\n*/\r\nexport default function (ip, binOrdec) {\r\n    if (ip === '') return null\r\n\r\n    // 判断ip类型只需要取出ip地址的第一段即可\r\n    let ip_fragment = utils.address_spliter(ip)[0]\r\n    // 如果是十进制, 需要先转换成二进制\r\n    if (!binOrdec) {\r\n        ip = utils.dec2bin(ip_fragment)\r\n    }\r\n    ip = utils.patchZero(ip)\r\n    ip = ip.split('').slice(0, 4)\r\n\r\n    let location_of_zero = ip.indexOf('0')\r\n    switch (location_of_zero) {\r\n        case 0:\r\n            return 'A'\r\n        case 1:\r\n            return 'B'\r\n        case 2:\r\n            return 'C'\r\n        case 3:\r\n            return 'D'\r\n        case -1:\r\n            return 'E'\r\n    }\r\n}\r\n","/*\r\n    @author:  Fitz\r\n    @name:  patchZero\r\n    @description:  二进制不足8位时, 在高位进行补0操作\r\n    @parms:  String 需要补0的二进制数\r\n    @return:  String 标准的8位二进制数\r\n*/\r\n\r\nexport default function (bin) {\r\n    let bin_arr = bin.split('')\r\n    let len = bin_arr.length\r\n\r\n    if (len === 8) {\r\n        return bin\r\n    }\r\n    while (len < 8) {\r\n        bin_arr.unshift('0')\r\n        len = bin_arr.length\r\n    }\r\n    return bin_arr.join('')\r\n}\r\n","import utils from '../index'\r\n\r\n/*\r\n    @author:  Fitz\r\n    @name:  bin_ip_address\r\n    @description:  将十进制的ip地址转换为二进制, 也可用于子网掩码\r\n    @parms:  String 十进制ip地址\r\n    @return:  String 二进制ip地址\r\n*/\r\nexport default function (dec_ip) {\r\n    let bin_ip_address_array = utils.address_spliter(dec_ip).map(fragment => {\r\n        let need_patchZero = utils.dec2bin(fragment)\r\n        return utils.patchZero(need_patchZero)\r\n    })\r\n    let bin_ip_address = utils.address_joiner(bin_ip_address_array)\r\n    return bin_ip_address\r\n}\r\n","import utils from '../index'\r\n\r\n/*\r\n    @author:  Fitz\r\n    @name:  bin_ip_address\r\n    @description:  将二进制的ip地址转换为十进制, 也可用于子网掩码\r\n    @parms:  String 二进制ip地址\r\n    @return:  String 十进制ip地址\r\n*/\r\nexport default function (bin_ip) {\r\n    let dec_ip_address_array = utils.address_spliter(bin_ip).map(fragment => {\r\n        return utils.bin2dec(fragment)\r\n    })\r\n    let dec_ip_address = utils.address_joiner(dec_ip_address_array)\r\n    return dec_ip_address\r\n}\r\n","/*\r\n    @author:  Fitz\r\n    @name:  standard_mask\r\n    @description:  每个类型IP对应的标准子网掩码, 其中flag用于标记子网号的开始的位置\r\n*/\r\nexport default {\r\n    A: {\r\n        mask: '255.0.0.0',\r\n        flag: 1,\r\n    },\r\n    B: {\r\n        mask: '255.255.0.0',\r\n        flag: 2,\r\n    },\r\n    C: {\r\n        mask: '255.255.255.0',\r\n        flag: 3,\r\n    },\r\n}\r\n","/*\r\n    @author:  Fitz\r\n    @name:  bits_of_subnet\r\n    @description:  根据ip地址的类型和子网掩码计算出子网号位数\r\n    @parms:  String ip地址类型,  String 子网掩码\r\n    @return:  Number 子网号位数\r\n*/\r\n\r\nimport standard_mask from '../mask_related/standard_mask'\r\nimport spliter from '../pretty/spliter'\r\nimport dec2bin from '../conversion/dec2bin'\r\nimport patchZero from '../pretty/patchZero'\r\n\r\nexport default function (ipClass, mask) {\r\n    const flag = standard_mask[ipClass]['flag'] // 子网号开始的标记\r\n    let counter = 0\r\n\r\n    // 二进制的子网掩码数组\r\n    let mask_dec_arr = spliter(mask).map(fragment => {\r\n        let need_to_patch = dec2bin(fragment)\r\n        return patchZero(need_to_patch)\r\n    })\r\n\r\n    // 只取子网掩码会出现片段\r\n    mask_dec_arr = mask_dec_arr.slice(flag, mask_dec_arr.length)\r\n\r\n    mask_dec_arr.forEach(fragment => {\r\n        let bit_arr = fragment.split('') // 每个子网掩码片段被分解成 8bit 组成的数组\r\n        bit_arr.filter(bit => {\r\n            if (bit === '1') counter++\r\n        })\r\n    })\r\n    return counter\r\n}\r\n","/*\r\n    @author:  Fitz\r\n    @name:  num_of_subnet\r\n    @description:  根据子网号位数分别返回旧版可用子网数和新版下的可用子网数\r\n    @parms:  Number 子网号位数\r\n    @return:  Object 旧版可用子网数 和 新版下的可用子网数\r\n*/\r\n\r\nexport default function (bits_of_subnet) {\r\n    if (bits_of_subnet < 1) {\r\n        return {\r\n            old_router: 0,\r\n            new_router: 0,\r\n        }\r\n    } else {\r\n        return {\r\n            old_router: 2 ** bits_of_subnet - 2,\r\n            new_router: 2 ** bits_of_subnet,\r\n        }\r\n    }\r\n}\r\n","/*\r\n    @author:  Fitz\r\n    @name:  standard_host_number\r\n    @description:  每一类型的IP地址的标准的主机号位数\r\n    @parms:  String ip地址类型\r\n    @return:  Number 主机号位数\r\n*/\r\n\r\nexport default function (ipClass) {\r\n    switch (ipClass) {\r\n        case 'A':\r\n            return 24\r\n        case 'B':\r\n            return 16\r\n        case 'C':\r\n            return 8\r\n        default:\r\n            return\r\n    }\r\n}\r\n","/*\r\n    @author:  Fitz\r\n    @name:  bits_of_hosts\r\n    @description:  计算主机号的位数\r\n    @parms:  String ip地址类型    String 子网掩码\r\n    @return:  Number 主机号位数\r\n*/\r\n\r\nimport standard_host_number from '../ip_related/standard_host_number'\r\nimport bits_of_subnet from './bits_of_subnet'\r\n\r\nexport default function (ipClass, mask) {\r\n    let num1 = bits_of_subnet(ipClass, mask)\r\n    let num2 = standard_host_number(ipClass)\r\n\r\n    return num2 - num1\r\n}\r\n","/*\r\n    @author:  Fitz\r\n    @name:  AND_operation\r\n    @description:  ip地址(2进制) 与 子网掩码(2进制)进行 `与操作`\r\n    @parms:  String ip地址(2进制)   String 子网掩码(2进制)\r\n    @return:  String 网络号/网络地址(2进制)\r\n*/\r\n\r\nimport spliter from '../pretty/spliter'\r\nimport joiner from '../pretty/joiner'\r\n\r\nexport default function (ip_bin, mask_bin) {\r\n    let ip_bin_arr = spliter(ip_bin)\r\n    let mask_bin_arr = spliter(mask_bin)\r\n    let fin = []\r\n\r\n    for (let i = 0, len = ip_bin_arr.length; i < len; i++) {\r\n        let ip_bit_arr = []\r\n        let mask_bit_arr = []\r\n        let and_results = []\r\n\r\n        for (const bit of ip_bin_arr[i]) {\r\n            ip_bit_arr.push(bit)\r\n        }\r\n        for (const bit2 of mask_bin_arr[i]) {\r\n            mask_bit_arr.push(bit2)\r\n        }\r\n\r\n        for (let j = 0, len = ip_bit_arr.length; j < len; j++) {\r\n            let and_result = Number(ip_bit_arr[j]) && Number(mask_bit_arr[j])\r\n            and_results.push(and_result)\r\n        }\r\n\r\n        fin.push(and_results)\r\n    }\r\n\r\n    fin = fin.map(bits_arr => bits_arr.join(''))\r\n\r\n    return joiner(fin)\r\n}\r\n","/*\r\n    @author:  Fitz\r\n    @name:  host_number_in_bin\r\n    @description:  计算主机号(2进制形式)\r\n    @parms:  String ip地址(2进制)    String 子网掩码\r\n    @return:  String 主机号(2进制)\r\n*/\r\n\r\nimport spliter from '../pretty/spliter'\r\nimport dec2bin from '../conversion/dec2bin'\r\nimport joiner from '../pretty/joiner'\r\nimport AND_operation from '../AND_operation'\r\nimport patchZero from '../pretty/patchZero'\r\n\r\nexport default function (ip_in_bin, mask) {\r\n    // 将子网掩码转换成二进制\r\n    let mask_arr_in_bin = spliter(mask).map(fragment => patchZero(dec2bin(fragment)))\r\n\r\n    // 将每一bit都翻转, 得到位翻转后的子网掩码数组\r\n    let mask_after_reverse = mask_arr_in_bin.map(fragment => {\r\n        let container = ''\r\n        for (const bit of fragment) {\r\n            bit = bit === '1' ? '0' : '1' // 翻转每一bit\r\n            container += bit\r\n        }\r\n        return container\r\n    })\r\n\r\n    let mask_bit_reverse = joiner(mask_after_reverse)\r\n\r\n    // 主机号 = ip && 翻转后的子网掩码\r\n    return AND_operation(ip_in_bin, mask_bit_reverse)\r\n}\r\n","/*\r\n    @author:  Fitz\r\n    @name:  host_address_dec\r\n    @description:  计算主机地址范围(10进制)\r\n    @parms:  String 网络地址(10进制)    Boolean ip地址的进制\r\n    @return:  String 主机地址范围  例: \"192.168.1.0 ~ 192.168.1.255\"\r\n*/\r\n\r\nimport ipClassifier from '../ip_related/ipClassifier'\r\nimport standard_mask from '../mask_related/standard_mask'\r\nimport spliter from '../pretty/spliter'\r\nimport joiner from '../pretty/joiner'\r\n\r\nexport default function (network_address_dec, binOrdec = false) {\r\n    let ipClass = ipClassifier(network_address_dec, binOrdec)\r\n    let flag = standard_mask[ipClass]['flag'] // 计算出主机地址能够变换的最开始位置\r\n    const fin_flag = 3 // 主机地址能够变换的最终位置\r\n\r\n    let network_address_dec_arr = spliter(network_address_dec)\r\n\r\n    // 深拷贝两份数组\r\n    let begin = [...network_address_dec_arr]\r\n    // 处理主机地址的开头部分\r\n    let change = +begin[flag]\r\n    change++ // 0不能作为主机地址\r\n    begin[flag] = change.toString()\r\n\r\n    // 处理主机地址结束结束部分\r\n    let end = [...begin]\r\n\r\n    while (flag !== fin_flag + 1) {\r\n        end[flag] = flag === 3 ? '254' : '255'\r\n        flag++\r\n    }\r\n\r\n    let from = joiner(begin)\r\n    let to = joiner(end)\r\n    return {\r\n        from,\r\n        to,\r\n    }\r\n}\r\n","/*\r\n    @author:  Fitz\r\n    @name:  throttle\r\n    @description:  节流函数\r\n    @parms:  Function 回调函数  Number 间隔时间    Object 存放定时器的对象(由于vuex中this为undefined, 需要存到其他位置)\r\n    @return:  Function\r\n*/\r\n\r\nexport default function (cb, time, timer_saver, ...args) {\r\n    let isLocked = false\r\n    let args_for_cb = Array.prototype.slice.call(arguments, 3)\r\n    return function () {\r\n        if (!isLocked) {\r\n            let result = cb.apply(this, args_for_cb)\r\n            isLocked = true\r\n            timer_saver = setTimeout(() => {\r\n                isLocked = false\r\n                clearTimeout(timer_saver)\r\n            }, time)\r\n            return result\r\n        }\r\n        // console.dir(Function.prototype)\r\n    }\r\n}\r\n","/*\r\n    @author:  Fitz\r\n    @name:  bit_combination_generator\r\n    @description:  二进制位(bin)的组合生成器\r\n    @parms:  Number 组合的bit位数\r\n    @return:  Array\r\n*/\r\n\r\n/* \r\n    示例:\r\n        input: 3\r\n\r\n        output:\r\n            [\r\n                ['0', '0', '0'],\r\n                ['0', '0', '1'],\r\n                ['0', '1', '0'],\r\n                ['0', '1', '1'],\r\n                ['1', '0', '0'],\r\n                ['1', '0', '1'],\r\n                ['1', '1', '0'],\r\n                ['1', '1', '1']\r\n            ]\r\n\r\n*/\r\n\r\n// 该算法下: 极限支持位数n为23, 平均计算时间: 6~8s   体验较好的计算位数n为20\r\n\r\nexport default function (n) {\r\n    var result = []\r\n    function bit_combination_generator(n, arr = [], i = 0) {\r\n        function printTheArray(arr, n) {\r\n            var single_result = []\r\n            for (let i = 0; i < n; i++) {\r\n                single_result.push(arr[i].toString())\r\n            }\r\n            return single_result\r\n        }\r\n\r\n        if (i === n) {\r\n            let single_result = printTheArray(arr, n)\r\n            result.push(single_result)\r\n            return\r\n        }\r\n\r\n        arr[i] = 0\r\n        bit_combination_generator(n, arr, i + 1)\r\n\r\n        arr[i] = 1\r\n        bit_combination_generator(n, arr, i + 1)\r\n    }\r\n    bit_combination_generator(n)\r\n    return result\r\n}\r\n","/*\r\n    @author:  Fitz\r\n    @name:  one_to_two\r\n    @description:  将一维数组转换为二维\r\n    @parms:  Number 每个数组的元素个数   Array 源数组\r\n    @return:  Array\r\n*/\r\n\r\nexport default function (num, arr) {\r\n    let result = []\r\n    while (arr.length > 0) {\r\n        let v = arr.splice(0, num)\r\n        result.push(v)\r\n    }\r\n    return result\r\n}\r\n","/*\r\n    @author:  Fitz\r\n    @name:  calc_host_address\r\n    @description:  根据(网络)ip地址和子网号位数计算出主机地址范围\r\n    @parms:  String 十进制(网络)ip地址    Number 子网号位数\r\n    @return:  String 主机地址范围  示例: \"192.168.1.0 ~ 192.168.1.255\"\r\n*/\r\n\r\nimport bin_ip_address from '../ip_related/bin_ip_address'\r\nimport ipClassifier from '../ip_related/ipClassifier'\r\nimport spliter from '../pretty/spliter'\r\nimport standard_mask from '../mask_related/standard_mask'\r\nimport dec_ip_address from '../ip_related/dec_ip_address'\r\nimport joiner from '../pretty/joiner'\r\n\r\nexport default function (ip, required_bits_for_subnet) {\r\n    let ipClass = ipClassifier(ip)\r\n    let bin_ip_address_arr = spliter(bin_ip_address(ip))\r\n    const flag = standard_mask[ipClass]['flag']\r\n\r\n    for (let i = flag, len = bin_ip_address_arr.length; i < len; i++) {\r\n        // 当不是C类地址时意味着至少改变两段\r\n        if (flag < 3 && i === len - 1) {\r\n            // 最后一段要全为1\r\n            bin_ip_address_arr[i] = '11111111'\r\n        } else {\r\n            let cur_fragment = bin_ip_address_arr[i]\r\n            let cur_fragment_arr = cur_fragment.split('')\r\n            cur_fragment_arr = cur_fragment_arr.map((bit, index) => {\r\n                if (index >= required_bits_for_subnet) {\r\n                    bit = '1'\r\n                }\r\n                return bit\r\n            })\r\n            bin_ip_address_arr[i] = cur_fragment_arr.join('')\r\n        }\r\n    }\r\n\r\n    // 主机地址的结束范围\r\n    let host_address_end = dec_ip_address(joiner(bin_ip_address_arr))\r\n\r\n    return `${ip} ~ ${host_address_end}`\r\n}\r\n","/*\r\n    @author:  Fitz\r\n    @name:  required_bits_for_subnets_from_host_nums\r\n    @description:  根据ip类型和需要容纳的主机数计算出需要拿出多少bits来作为子网号位数\r\n    @parms:  String ip地址类型    Number 所需子网数\r\n    @return:  Number 子网号的bits数\r\n*/\r\n\r\nexport default function (ipClass, require_host_nums) {\r\n    // 未子网划分时, 主机号位数\r\n    let origin_host_bits\r\n\r\n    switch (ipClass) {\r\n        case 'A':\r\n            origin_host_bits = 24\r\n            break\r\n        case 'B':\r\n            origin_host_bits = 16\r\n            break\r\n        case 'C':\r\n            origin_host_bits = 8\r\n            break\r\n    }\r\n    // 满足需要容纳的主机数时, 主机号的位数为\r\n    let host_bits = Math.ceil(Math.log2(require_host_nums))\r\n    // 最终子网号位数为\r\n    return origin_host_bits - host_bits\r\n}\r\n","/*\r\n    @author:  Fitz\r\n    @name:  array_remove_duplicates\r\n    @description:  数组去重\r\n    @parms:  Array\r\n    @return:  Array 去重后的数组\r\n*/\r\n\r\nexport default function (arr) {\r\n    return new Array(...new Set(arr))\r\n}\r\n","import bin2dec from './conversion/bin2dec'\r\nimport dec2bin from './conversion/dec2bin'\r\nimport address_spliter from './pretty/spliter'\r\nimport address_joiner from './pretty/joiner'\r\nimport ipClassifier from './ip_related/ipClassifier'\r\nimport judgeType from './judgeType'\r\nimport patchZero from './pretty/patchZero'\r\nimport bin_ip_address from './ip_related/bin_ip_address'\r\nimport dec_ip_address from './ip_related/dec_ip_address'\r\nimport standard_mask from './mask_related/standard_mask'\r\nimport bits_of_subnet from './subnet_related/bits_of_subnet'\r\nimport num_of_subnet from './subnet_related/num_of_subnet'\r\nimport standard_host_number from './ip_related/standard_host_number'\r\nimport bits_of_hosts from './subnet_related/bits_of_hosts'\r\nimport host_number_in_bin from './subnet_related/host_number_in_bin'\r\nimport AND_operation from './AND_operation'\r\nimport host_address_dec from './subnet_related/host_address_dec'\r\nimport throttle from './throttle'\r\nimport bit_combination_generator from './bit_combination_generator'\r\nimport arr_vector_one_to_two from './array_vector/one_to_two'\r\nimport calc_host_address from './the_scale_of_host_address'\r\nimport required_bits_for_subnets_from_host_nums from './subnet_related/required_bits_for_subnets'\r\nimport array_remove_duplicates from './pretty/array_remove_duplicates'\r\n\r\nexport default {\r\n    bin2dec,\r\n    dec2bin,\r\n    judgeType,\r\n    address_spliter,\r\n    ipClassifier,\r\n    patchZero,\r\n    bin_ip_address,\r\n    address_joiner,\r\n    dec_ip_address,\r\n    standard_mask,\r\n    bits_of_subnet,\r\n    num_of_subnet,\r\n    standard_host_number,\r\n    bits_of_hosts,\r\n    host_number_in_bin,\r\n    AND_operation,\r\n    host_address_dec,\r\n    throttle,\r\n    bit_combination_generator,\r\n    arr_vector_one_to_two,\r\n    calc_host_address,\r\n    required_bits_for_subnets_from_host_nums,\r\n    array_remove_duplicates,\r\n}\r\n","<template>\r\n    <div>\r\n        <div id=\"pics\">\r\n            <img src=\"../assets/ipclassifier.png\" />\r\n            <img src=\"../assets/ipclassifier2.png\" />\r\n        </div>\r\n\r\n        <el-divider></el-divider>\r\n\r\n        <div id=\"main\">\r\n            <div id=\"switch\">\r\n                <el-switch\r\n                    v-model=\"binOrdec\"\r\n                    inactive-text=\"十进制\"\r\n                    active-text=\"二进制\"\r\n                    active-color=\"#ff4949\"\r\n                ></el-switch>\r\n            </div>\r\n            &nbsp;&nbsp;&nbsp;&nbsp;\r\n            <label for=\"ip\">ip地址: </label>\r\n            <el-input\r\n                id=\"ip\"\r\n                type=\"text\"\r\n                placeholder=\"请输入IP地址\"\r\n                v-model=\"ip_address\"\r\n                :maxlength=\"maxlength\"\r\n                show-word-limit\r\n                :clearable=\"true\"\r\n                ref=\"el_input\"\r\n            >\r\n            </el-input>\r\n            <div id=\"result\" v-show=\"ipClass\">这是一个 {{ ipClass }} 类地址</div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import { mapGetters } from \"vuex\"\r\n    import utils from \"../utils/index\"\r\n\r\n    export default {\r\n        name: 'IpClass', // 指定组件名\r\n        data: function() {\r\n            return {}\r\n        },\r\n        computed: {\r\n            ...mapGetters([\r\n                \"ipClass\"\r\n            ]),\r\n\r\n            ip_address: {\r\n                get() {\r\n                    return this.$store.state.ip_address\r\n                },\r\n                set(val) {\r\n                    // 修复el-input组件的清空功能\r\n                    if (val === \"\") {\r\n                        this.$store.state.ip_address = val\r\n                        return\r\n                    }\r\n\r\n                    const reg = /(\\.|[0-9]){1}/ig\r\n                    let str_len = val.length\r\n\r\n                    if( reg.test(val[str_len-1]) ) {\r\n                        if (val.endsWith(\".\", str_len-1) && val.endsWith(\".\")) return   // 不能输入两次. 例如: 192..168\r\n                        this.$store.state.ip_address = val\r\n                    }\r\n\r\n                    // 十进制下, ip输入不能出现超过255的情况\r\n                    if (!this.binOrdec) {\r\n                        utils.address_spliter(val).forEach(\r\n                            fragment => {\r\n                                if (Number(fragment) > 255) {\r\n                                    this.$message.closeAll()\r\n                                    this.$message({\r\n                                        showClose: true,\r\n                                        message: '请仔细检查ip地址 !!! ',\r\n                                        type: 'error'\r\n                                    })\r\n                                    return\r\n                                }\r\n                            }\r\n                        )\r\n                    }\r\n                }\r\n            },\r\n            binOrdec: {\r\n                get() {\r\n                    return this.$store.state.binOrdec\r\n                },\r\n                set(val) {\r\n                    this.$store.state.ip_address = \"\"\r\n                    this.$store.state.binOrdec = val\r\n                    if (val) {\r\n                        this.$refs.el_input.$el.style.width = \"330px\"\r\n                    }else {\r\n                        this.$refs.el_input.$el.style.width = \"200px\"\r\n                    }\r\n                }\r\n            },\r\n\r\n            // 根据ip地址的进制, 动态改变输入框的文本输入限制\r\n            maxlength() {\r\n                return this.binOrdec? 35 : 15\r\n            }\r\n        },\r\n        watch: {\r\n            binOrdec: {\r\n                immediate: true,\r\n                handler(bool) {\r\n                    this.$nextTick(\r\n                        ()=> {\r\n                            if (bool) {\r\n                                this.$refs.el_input.$el.style.width = \"330px\"\r\n                            }else {\r\n                                this.$refs.el_input.$el.style.width = \"200px\"\r\n                            }\r\n                        }\r\n                    )\r\n                }\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n    #pics {\r\n        display: flex;\r\n        justify-content: space-around;\r\n        align-items: center;\r\n\r\n        img {\r\n            width: 49%;\r\n            height: 350px;\r\n        }\r\n    }\r\n\r\n    .el-input {\r\n        width: 200px;\r\n        margin: 20px 0;\r\n    }\r\n</style>\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./IpClass.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./IpClass.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./IpClass.vue?vue&type=template&id=0cf9e036&scoped=true&\"\nimport script from \"./IpClass.vue?vue&type=script&lang=js&\"\nexport * from \"./IpClass.vue?vue&type=script&lang=js&\"\nimport style0 from \"./IpClass.vue?vue&type=style&index=0&id=0cf9e036&lang=less&scoped=true&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"0cf9e036\",\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{\"id\":\"container\"}},[_c('div',{attrs:{\"id\":\"switch\"}},[_c('el-switch',{attrs:{\"active-text\":\"二进制\",\"active-color\":\"#ff4949\",\"inactive-text\":\"十进制\"},model:{value:(_vm.binOrdec),callback:function ($$v) {_vm.binOrdec=$$v},expression:\"binOrdec\"}})],1),_c('span',[_vm._v(\"IP地址:\")]),_c('el-input',{ref:\"el_input\",style:({ marginLeft: '21px' }),attrs:{\"type\":\"text\",\"placeholder\":\"请输入ip地址\",\"maxlength\":_vm.binOrdec ? 35 : 15,\"show-word-limit\":\"\",\"clearable\":true,\"size\":\"small\"},model:{value:(_vm.ip_address),callback:function ($$v) {_vm.ip_address=$$v},expression:\"ip_address\"}}),_c('br'),_c('span',{staticStyle:{\"margin-right\":\"20px\"}},[_vm._v(\" 子网掩码(仅支持十进制): \")]),_c('el-autocomplete',{staticClass:\"inline-input\",attrs:{\"fetch-suggestions\":_vm.suggestions,\"placeholder\":\"请输入子网掩码\",\"maxlength\":15,\"show-word-limit\":\"\",\"clearable\":true,\"size\":\"small\"},model:{value:(_vm.subnet_mask),callback:function ($$v) {_vm.subnet_mask=$$v},expression:\"subnet_mask\"}}),_c('el-divider'),_c('div',{attrs:{\"id\":\"details\"}},[_c('el-descriptions',{attrs:{\"column\":1,\"border\":\"\"}},_vm._l((_vm.details),function(item,index){return _c('el-descriptions-item',{key:index,attrs:{\"labelStyle\":{ 'text-align': 'center', 'background-color': index%2===0?'#E1F3D8':'#DCDCDC', 'font-size': '14px', 'color': 'black' },\"contentStyle\":{ 'text-align': 'center', 'background-color': index%2===0?'#E1F3D8':'#DCDCDC', 'font-size': '14px', 'color': 'black' },\"label\":item.label}},[_vm._v(\" \"+_vm._s(item.result)+\" \")])}),1)],1)],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <div id=\"container\">\r\n        <div id=\"switch\">\r\n            <el-switch v-model=\"binOrdec\" active-text=\"二进制\" active-color=\"#ff4949\" inactive-text=\"十进制\">\r\n            </el-switch>\r\n        </div>\r\n\r\n        <span>IP地址:</span>\r\n        <el-input\r\n            type=\"text\"\r\n            placeholder=\"请输入ip地址\"\r\n            v-model=\"ip_address\"\r\n            :maxlength=\"binOrdec ? 35 : 15\"\r\n            show-word-limit\r\n            :clearable=\"true\"\r\n            size=\"small\"\r\n            :style=\"{ marginLeft: '21px' }\"\r\n            ref=\"el_input\"\r\n        ></el-input>\r\n\r\n        <br />\r\n\r\n        <span style=\"margin-right: 20px;\"> 子网掩码(仅支持十进制): </span>\r\n        <el-autocomplete\r\n            class=\"inline-input\"\r\n            v-model=\"subnet_mask\"\r\n            :fetch-suggestions=\"suggestions\"\r\n            placeholder=\"请输入子网掩码\"\r\n            :maxlength=\"15\"\r\n            show-word-limit\r\n            :clearable=\"true\"\r\n            size=\"small\"\r\n        ></el-autocomplete>\r\n\r\n        <el-divider></el-divider>\r\n\r\n        <div id=\"details\">\r\n            <el-descriptions :column=\"1\" border>\r\n                <el-descriptions-item\r\n                    v-for=\"(item, index) in details\"\r\n                    :key=\"index\"\r\n                    :labelStyle=\"{ 'text-align': 'center', 'background-color': index%2===0?'#E1F3D8':'#DCDCDC', 'font-size': '14px', 'color': 'black' }\"\r\n                    :contentStyle=\"{ 'text-align': 'center', 'background-color': index%2===0?'#E1F3D8':'#DCDCDC', 'font-size': '14px', 'color': 'black' }\"\r\n                    :label=\"item.label\"\r\n                >\r\n                    {{ item.result }}\r\n                </el-descriptions-item>\r\n            </el-descriptions>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import { mapGetters } from 'vuex'\r\n    import utils from '../utils'\r\n\r\n    export default {\r\n        name: 'IpDetail', // 指定组件名\r\n        data: function() {\r\n            return {\r\n                advices: [],\r\n                details: [\r\n                    {\r\n                        label: \"iP地址的二进制形式:\",\r\n                        result: null,\r\n                    },\r\n                    {\r\n                        label: \"iP地址分类:\",\r\n                        result: null\r\n                    },\r\n                    {\r\n                        label: \"子网号位数:\",\r\n                        result: null\r\n                    },\r\n                    {\r\n                        label: \"可用子网数(子网号全为0或1会冲突):\",\r\n                        result: null\r\n                    },\r\n                    {\r\n                        label: \"新路由器的可用子网数(子网号全为0或1不再冲突):\",\r\n                        result: null\r\n                    },\r\n                    {\r\n                        label: \"主机号位数:\",\r\n                        result: null\r\n                    },\r\n                    {\r\n                        label: \"主机号(10进制):\",\r\n                        result: null\r\n                    },\r\n                    {\r\n                        label: \"主机号(2进制):\",\r\n                        result: null\r\n                    },\r\n                    {\r\n                        label: \"主机数:\",\r\n                        result: null\r\n                    },\r\n                    {\r\n                        label: \"可用主机数:\",\r\n                        result: null\r\n                    },\r\n                    {\r\n                        label: \"网络地址(10进制):\",\r\n                        result: null\r\n                    },\r\n                    {\r\n                        label: \"网络地址(2进制):\",\r\n                        result: null\r\n                    },\r\n                    {\r\n                        label: \"主机地址范围(不考虑子网划分)(10进制):\",\r\n                        result: null\r\n                    },\r\n                    {\r\n                        label: \"主机地址范围(不考虑子网划分)(2进制):\",\r\n                        result: null\r\n                    },\r\n                ],\r\n            }\r\n        },\r\n        mounted() {\r\n            this.advices = this.loadAll()\r\n        },\r\n        methods: {\r\n            // 子网掩码自动填充用\r\n            suggestions(queryString, cb) {\r\n                var advices = this.advices\r\n                var results = queryString ? advices.filter(this.createFilter(queryString)) : advices\r\n                // 调用 callback 返回建议列表的数据\r\n                cb(results)\r\n            },\r\n            createFilter(queryString) {\r\n                return restaurant => {\r\n                    return restaurant.value.toLowerCase().indexOf(queryString.toLowerCase()) === 0\r\n                }\r\n            },\r\n            loadAll() {\r\n                return [{ value: '255.0.0.0' }, { value: '255.255.0.0' }, { value: '255.255.255.0' }]\r\n            },\r\n            // 子网掩码自动填充用\r\n        },\r\n        computed: {\r\n\r\n            ...mapGetters([\r\n                \"convert_ip_address\",\r\n                \"ipClass\",\r\n                \"bits_of_subnet\",\r\n                \"num_of_subnet\",\r\n                \"bits_of_hosts\",\r\n                \"host_number_in_dec\",\r\n                \"host_number_in_bin\",\r\n                \"hosts\",\r\n                \"useful_hosts\",\r\n                \"network_address_dec\",\r\n                \"network_address_bin\",\r\n                \"host_address_dec\",\r\n                \"host_address_bin\",\r\n            ]),\r\n\r\n            ip_address: {\r\n                get() {\r\n                    return this.$store.state.ip_address\r\n                },\r\n                set(val) {\r\n                    // 修复el-input组件的清空功能\r\n                    if (val === '') {\r\n                        this.$store.state.ip_address = val\r\n                        return\r\n                    }\r\n\r\n                    const reg = /(\\.|[0-9]){1}/gi\r\n                    let str_len = val.length\r\n\r\n                    if (reg.test(val[str_len - 1])) {\r\n                        if (val.endsWith('.', str_len - 1) && val.endsWith('.')) return // 不能输入两次. 例如: 192..168\r\n                        this.$store.state.ip_address = val\r\n                    }\r\n\r\n                    // 十进制下, ip输入不能出现超过255的情况\r\n                    if (!this.binOrdec) {\r\n                        utils.address_spliter(val).forEach(fragment => {\r\n                            if (Number(fragment) > 255) {\r\n                                this.$message.closeAll()\r\n                                this.$message({\r\n                                    showClose: true,\r\n                                    message: '请仔细检查ip地址 !!! ',\r\n                                    type: 'error',\r\n                                })\r\n                                return\r\n                            }\r\n                        })\r\n                    }\r\n                },\r\n            },\r\n            binOrdec: {\r\n                get() {\r\n                    return this.$store.state.binOrdec\r\n                },\r\n                set(val) {\r\n                    this.$store.state.ip_address = ''\r\n                    this.$store.state.binOrdec = val\r\n                    if (val) {\r\n                        this.$refs.el_input.$el.style.width = '330px'\r\n                    } else {\r\n                        this.$refs.el_input.$el.style.width = '200px'\r\n                    }\r\n                },\r\n            },\r\n            subnet_mask: {\r\n                get() {\r\n                    return this.$store.state.subnet_mask\r\n                },\r\n                set(val) {\r\n                    // 修复el-input组件的清空功能\r\n                    if (val === '') {\r\n                        this.$store.state.subnet_mask = val\r\n                        return\r\n                    }\r\n\r\n                    const reg = /(\\.|[0-9]){1}/gi\r\n                    let str_len = val.length\r\n\r\n                    if (reg.test(val[str_len - 1])) {\r\n                        if (val.endsWith('.', str_len - 1) && val.endsWith('.')) return // 不能输入两次. 例如: 192..168\r\n                        this.$store.state.subnet_mask = val\r\n                    }\r\n\r\n                    // 十进制下, ip输入不能出现超过255的情况\r\n                    if (!this.binOrdec) {\r\n                        utils.address_spliter(val).forEach(fragment => {\r\n                            if (Number(fragment) > 255) {\r\n                                this.$message.closeAll()\r\n                                this.$message({\r\n                                    showClose: true,\r\n                                    message: '请仔细检查子网掩码 !!! ',\r\n                                    type: 'error',\r\n                                })\r\n                                return\r\n                            }\r\n                        })\r\n                    }\r\n                },\r\n            },\r\n\r\n        },\r\n        watch: {\r\n            binOrdec: {\r\n                immediate: true,\r\n                handler(bool) {\r\n                    this.$nextTick(() => {\r\n                        if (bool) {\r\n                            this.$refs.el_input.$el.style.width = '330px'\r\n                            // 输入为二进制时, 显示十进制结果\r\n                            this.details[0].label = \"iP地址的十进制形式:\"\r\n                        } else {\r\n                            this.$refs.el_input.$el.style.width = '200px'\r\n                            // 输入为十进制时, 显示二进制结果\r\n                            this.details[0].label = \"iP地址的二进制形式:\"\r\n                        }\r\n                    })\r\n                },\r\n            },\r\n            convert_ip_address: {\r\n                immediate: true,\r\n                handler(val) {\r\n                    this.details[0].result = val\r\n                },\r\n            },\r\n            ipClass: {\r\n                immediate: true,\r\n                handler(c) {\r\n                    this.details[1].result = c ? `${c}类地址` : null\r\n                }\r\n            },\r\n            bits_of_subnet: {\r\n                immediate: true,\r\n                handler(num) {\r\n                    this.details[2].result = num\r\n                }\r\n            },\r\n            num_of_subnet: {\r\n                immediate: true,\r\n                handler(obj) {\r\n                    this.details[3].result = obj.old_router\r\n                    this.details[4].result = obj.new_router\r\n                }\r\n            },\r\n            bits_of_hosts: {\r\n                immediate: true,\r\n                handler(num) {\r\n                    this.details[5].result = num\r\n                }\r\n            },\r\n            host_number_in_dec: {\r\n                immediate: true,\r\n                handler(num) {\r\n                    this.details[6].result = num\r\n                }\r\n            },\r\n            host_number_in_bin: {\r\n                immediate: true,\r\n                handler(num) {\r\n                    this.details[7].result = num\r\n                }\r\n            },\r\n            hosts: {\r\n                immediate: true,\r\n                handler(num) {\r\n                    this.details[8].result = num\r\n                }\r\n            },\r\n            useful_hosts: {\r\n                immediate: true,\r\n                handler(num) {\r\n                    this.details[9].result = num\r\n                }\r\n            },\r\n            network_address_dec: {\r\n                immediate: true,\r\n                handler(address) {\r\n                    this.details[10].result = address\r\n                }\r\n            },\r\n            network_address_bin: {\r\n                immediate: true,\r\n                handler(address) {\r\n                    this.details[11].result = address\r\n                }\r\n            },\r\n            host_address_dec: {\r\n                immediate: true,\r\n                handler(address) {\r\n                    this.details[12].result = address\r\n                }\r\n            },\r\n            host_address_bin: {\r\n                immediate: true,\r\n                handler(address) {\r\n                    this.details[13].result = address\r\n                }\r\n            },\r\n        },\r\n    }\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n    .el-input {\r\n        margin: 20px 0;\r\n    }\r\n\r\n    #details {\r\n        width: 65%;\r\n        margin: 0 auto;\r\n    }\r\n\r\n    .el-descriptions-item_cell {\r\n        background-color: red!important;\r\n    }\r\n</style>\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./IpDetails.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./IpDetails.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./IpDetails.vue?vue&type=template&id=e6c8d2c0&scoped=true&\"\nimport script from \"./IpDetails.vue?vue&type=script&lang=js&\"\nexport * from \"./IpDetails.vue?vue&type=script&lang=js&\"\nimport style0 from \"./IpDetails.vue?vue&type=style&index=0&id=e6c8d2c0&lang=less&scoped=true&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"e6c8d2c0\",\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{\"id\":\"container\"}},[_c('div',{attrs:{\"id\":\"input_container1\"}},[_c('span',[_vm._v(\"IP地址1: \")]),_c('el-input',{staticStyle:{\"width\":\"200px\"},attrs:{\"type\":\"text\",\"maxlength\":15,\"show-word-limit\":\"\",\"clearable\":true,\"size\":\"small\",\"placeholder\":\"请输入IP地址1\"},model:{value:(_vm.ip_address1),callback:function ($$v) {_vm.ip_address1=$$v},expression:\"ip_address1\"}}),_c('br'),_c('br'),_c('span',[_vm._v(\"子网掩码1: \")]),_c('el-autocomplete',{staticClass:\"inline-input\",staticStyle:{\"width\":\"200px\"},attrs:{\"fetch-suggestions\":_vm.suggestions,\"placeholder\":\"请输入子网掩码1\",\"maxlength\":15,\"show-word-limit\":\"\",\"clearable\":true,\"size\":\"small\"},model:{value:(_vm.subnet_mask1),callback:function ($$v) {_vm.subnet_mask1=$$v},expression:\"subnet_mask1\"}}),_c('br'),_c('br'),_c('div',[_c('span',[_vm._v(\"网络地址1:\")]),_c('span',[_vm._v(_vm._s(_vm.network_address_1))])])],1),_c('div',{attrs:{\"id\":\"input_container2\"}},[_c('span',[_vm._v(\"IP地址2: \")]),_c('el-input',{staticStyle:{\"width\":\"200px\"},attrs:{\"type\":\"text\",\"maxlength\":15,\"show-word-limit\":\"\",\"clearable\":true,\"size\":\"small\",\"placeholder\":\"请输入IP地址2\"},model:{value:(_vm.ip_address2),callback:function ($$v) {_vm.ip_address2=$$v},expression:\"ip_address2\"}}),_c('br'),_c('br'),_c('span',[_vm._v(\"子网掩码1: \")]),_c('el-autocomplete',{staticClass:\"inline-input\",staticStyle:{\"width\":\"200px\"},attrs:{\"fetch-suggestions\":_vm.suggestions,\"placeholder\":\"请输入子网掩码2\",\"maxlength\":15,\"show-word-limit\":\"\",\"clearable\":true,\"size\":\"small\"},model:{value:(_vm.subnet_mask2),callback:function ($$v) {_vm.subnet_mask2=$$v},expression:\"subnet_mask2\"}}),_c('br'),_c('br'),_c('div',[_c('span',[_vm._v(\"网络地址2:\")]),_c('span',[_vm._v(_vm._s(_vm.network_address_2))])])],1),_c('div',{attrs:{\"id\":\"compare_result\"}},[(_vm.isSameNetWork === undefined)?_c('span',[_vm._v(\"等待输入地址/子网掩码\")]):(_vm.isSameNetWork)?_c('span',[_vm._v(\"两个IP \"),_c('span',{staticStyle:{\"color\":\"red\"}},[_vm._v(\"属于同一个网络\")])]):_c('span',[_vm._v(\"两个IP \"),_c('span',{staticStyle:{\"color\":\"red\"}},[_vm._v(\"不属于属于同一个网络\")])])])])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <div id=\"container\">\r\n        <div id=\"input_container1\">\r\n            <span>IP地址1: </span>\r\n            <el-input\r\n                type=\"text\"\r\n                v-model=\"ip_address1\"\r\n                :maxlength=\"15\"\r\n                show-word-limit\r\n                :clearable=\"true\"\r\n                size=\"small\"\r\n                style=\"width: 200px\"\r\n                placeholder=\"请输入IP地址1\"\r\n            ></el-input>\r\n            <br />\r\n            <br />\r\n            <span>子网掩码1: </span>\r\n            <el-autocomplete\r\n                class=\"inline-input\"\r\n                v-model=\"subnet_mask1\"\r\n                :fetch-suggestions=\"suggestions\"\r\n                placeholder=\"请输入子网掩码1\"\r\n                :maxlength=\"15\"\r\n                show-word-limit\r\n                :clearable=\"true\"\r\n                size=\"small\"\r\n                style=\"width: 200px\"\r\n            ></el-autocomplete>\r\n            <br />\r\n            <br />\r\n            <div>\r\n                <span>网络地址1:</span>\r\n                <span>{{ network_address_1 }}</span>\r\n            </div>\r\n        </div>\r\n\r\n        <div id=\"input_container2\">\r\n            <span>IP地址2: </span>\r\n            <el-input\r\n                type=\"text\"\r\n                v-model=\"ip_address2\"\r\n                :maxlength=\"15\"\r\n                show-word-limit\r\n                :clearable=\"true\"\r\n                size=\"small\"\r\n                style=\"width: 200px\"\r\n                placeholder=\"请输入IP地址2\"\r\n            ></el-input>\r\n            <br />\r\n            <br />\r\n            <span>子网掩码1: </span>\r\n            <el-autocomplete\r\n                class=\"inline-input\"\r\n                v-model=\"subnet_mask2\"\r\n                :fetch-suggestions=\"suggestions\"\r\n                placeholder=\"请输入子网掩码2\"\r\n                :maxlength=\"15\"\r\n                show-word-limit\r\n                :clearable=\"true\"\r\n                size=\"small\"\r\n                style=\"width: 200px\"\r\n            ></el-autocomplete>\r\n            <br />\r\n            <br />\r\n            <div>\r\n                <span>网络地址2:</span>\r\n                <span>{{ network_address_2 }}</span>\r\n            </div>\r\n        </div>\r\n\r\n        <div id=\"compare_result\">\r\n            <span v-if=\"isSameNetWork === undefined\">等待输入地址/子网掩码</span>\r\n            <span v-else-if=\"isSameNetWork\">两个IP <span style=\"color: red;\">属于同一个网络</span></span>\r\n            <span v-else>两个IP <span style=\"color: red;\">不属于属于同一个网络</span></span>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import { mapGetters } from 'vuex';\r\n    import utils from \"../utils\"\r\n\r\n        export default {\r\n            name: 'IsSameNet', // 指定组件名\r\n            data: function() {\r\n                return {\r\n                    advices: [],\r\n                }\r\n            },\r\n            mounted() {\r\n                    this.advices = this.loadAll()\r\n            },\r\n            methods: {\r\n                    suggestions(queryString, cb) {\r\n                        var advices = this.advices;\r\n                        var results = queryString ? advices.filter(this.createFilter(queryString)) : advices;\r\n                        // 调用 callback 返回建议列表的数据\r\n                        cb(results);\r\n                    },\r\n                    createFilter(queryString) {\r\n                        return (restaurant) => {\r\n                        return (restaurant.value.toLowerCase().indexOf(queryString.toLowerCase()) === 0);\r\n                        };\r\n                    },\r\n                    loadAll() {\r\n                        return [\r\n                            { \"value\": \"255.0.0.0\" },\r\n                            { \"value\": \"255.255.0.0\" },\r\n                            { \"value\": \"255.255.255.0\" },\r\n                        ]\r\n                    },\r\n            },\r\n            computed: {\r\n                ...mapGetters([\r\n                    \"network_address_1\",\r\n                    \"network_address_2\",\r\n                ]),\r\n                ip_address1: {\r\n                    get() {\r\n                        return this.$store.state.ip_address\r\n                    },\r\n                    set(new_address) {\r\n                        this.$store.state.ip_address = new_address\r\n                    },\r\n                },\r\n                subnet_mask1: {\r\n                    get() {\r\n                        return this.$store.state.subnet_mask\r\n                    },\r\n                    set(new_mask) {\r\n                        this.$store.state.subnet_mask = new_mask\r\n                    },\r\n                },\r\n                ip_address2: {\r\n                    get() {\r\n                        return this.$store.state.ip_address2\r\n                    },\r\n                    set(new_address) {\r\n                        this.$store.state.ip_address2 = new_address\r\n                    },\r\n                },\r\n                subnet_mask2: {\r\n                    get() {\r\n                        return this.$store.state.subnet_mask2\r\n                    },\r\n                    set(new_mask) {\r\n                        this.$store.state.subnet_mask2 = new_mask\r\n                    },\r\n                },\r\n                isSameNetWork() {\r\n                    let {ip_address1,\r\n                        ip_address2,\r\n                        subnet_mask1,\r\n                        subnet_mask2,\r\n                        network_address_1,\r\n                        network_address_2,\r\n                    } = this\r\n\r\n                    // 有任何一个ip或子网掩码未输入, 都会提示  `等待输入`\r\n                    if (!(ip_address1 && ip_address2 && subnet_mask1 && subnet_mask2)) return\r\n\r\n                    let isSameNetwork_arr = utils.address_spliter(network_address_1).filter(\r\n                        (fragment, index, thisArr) => {\r\n                            let fragment2 = utils.address_spliter(network_address_2)[index]\r\n                            fragment = Number(fragment)\r\n                            fragment2 = Number(fragment2)\r\n                            return fragment === fragment2\r\n                        }\r\n                    )\r\n\r\n                    return isSameNetwork_arr.length === 4\r\n                }\r\n            },\r\n        }\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n    #container {\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n    }\r\n\r\n    #input_container1,\r\n    #input_container2 {\r\n        margin: 0 50px;\r\n\r\n        & span {\r\n            margin-right: 50px;\r\n        }\r\n        & span:first-of-type {\r\n            margin-right: 67px;\r\n        }\r\n    }\r\n\r\n    #compare_result {\r\n        width: 200px;\r\n        height: 50px;\r\n        position: fixed;\r\n        left: 50%;\r\n        margin-left: -100px;\r\n        top: 350px;\r\n    }\r\n</style>\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./IsSameNet.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./IsSameNet.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./IsSameNet.vue?vue&type=template&id=759eb8ce&scoped=true&\"\nimport script from \"./IsSameNet.vue?vue&type=script&lang=js&\"\nexport * from \"./IsSameNet.vue?vue&type=script&lang=js&\"\nimport style0 from \"./IsSameNet.vue?vue&type=style&index=0&id=759eb8ce&lang=less&scoped=true&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"759eb8ce\",\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{directives:[{name:\"loading\",rawName:\"v-loading\",value:(true),expression:\"true\"}],attrs:{\"element-loading-text\":\"拼命开发中...\",\"element-loading-spinner\":\"el-icon-loading\",\"element-loading-background\":\"rgba(255, 255, 255, .8)\"}},[_vm._v(\" NetConfigGen \")])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <div\r\n        v-loading=\"true\"\r\n        element-loading-text=\"拼命开发中...\"\r\n        element-loading-spinner=\"el-icon-loading\"\r\n        element-loading-background=\"rgba(255, 255, 255, .8)\"\r\n    >\r\n        NetConfigGen\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n\r\n    export default {\r\n        name: \"NetConfigGen\", // 指定组件名\r\n        data: function () {\r\n            return {\r\n\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n    div {\r\n        height: 87vh;\r\n    }\r\n</style>\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./NetConfigGen.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./NetConfigGen.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./NetConfigGen.vue?vue&type=template&id=b12fcb7a&scoped=true&\"\nimport script from \"./NetConfigGen.vue?vue&type=script&lang=js&\"\nexport * from \"./NetConfigGen.vue?vue&type=script&lang=js&\"\nimport style0 from \"./NetConfigGen.vue?vue&type=style&index=0&id=b12fcb7a&lang=less&scoped=true&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"b12fcb7a\",\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{\"id\":\"container\"}},[_c('div',{attrs:{\"id\":\"steps\"}},[_c('el-steps',{attrs:{\"active\":_vm.active,\"align-center\":\"\",\"finish-status\":\"success\"}},[_c('el-step',{attrs:{\"title\":\"步骤1\",\"description\":\"子网划分题目的类型\"}}),_c('el-step',{attrs:{\"title\":\"步骤2\",\"description\":\"填写计算所需的条件\"}}),_c('el-step',{attrs:{\"title\":\"步骤3\",\"description\":\"计算得出需要的结果\"}})],1)],1),_c('div',{attrs:{\"id\":\"figure\"}},[_c('router-view')],1)])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <div id=\"container\">\r\n        <div id=\"steps\">\r\n            <el-steps :active=\"active\" align-center finish-status=\"success\">\r\n                <el-step title=\"步骤1\" description=\"子网划分题目的类型\"></el-step>\r\n                <el-step title=\"步骤2\" description=\"填写计算所需的条件\"></el-step>\r\n                <el-step title=\"步骤3\" description=\"计算得出需要的结果\"></el-step>\r\n            </el-steps>\r\n        </div>\r\n\r\n        <div id=\"figure\">\r\n            <!-- <keep-alive>\r\n                <router-view></router-view>\r\n            </keep-alive> -->\r\n            <router-view></router-view>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import { mapState } from 'vuex'\r\n\r\n    export default {\r\n        name: 'Subnetting', // 指定组件名\r\n        data: function() {\r\n            return {}\r\n        },\r\n        computed: {\r\n            ...mapState(['active']),\r\n        },\r\n        watch: {\r\n            $route: {\r\n                immediate: true,\r\n                deep: true,\r\n                handler({ name }) {\r\n                    switch (name) {\r\n                        case 'Process1':\r\n                            this.$store.state.active = 0\r\n                            break\r\n                        case 'Process2':\r\n                            this.$store.state.active = 1\r\n                            break\r\n                        case 'Process3':\r\n                            this.$store.state.active = 3\r\n                            break\r\n                    }\r\n                },\r\n            },\r\n        },\r\n    }\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n    #figure {\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n    }\r\n</style>\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Subnetting.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Subnetting.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Subnetting.vue?vue&type=template&id=c67a9bd2&scoped=true&\"\nimport script from \"./Subnetting.vue?vue&type=script&lang=js&\"\nexport * from \"./Subnetting.vue?vue&type=script&lang=js&\"\nimport style0 from \"./Subnetting.vue?vue&type=style&index=0&id=c67a9bd2&lang=less&scoped=true&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"c67a9bd2\",\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('div',{attrs:{\"id\":\"known_conditions\"}},[_c('el-radio',{attrs:{\"label\":\"1\",\"border\":\"\"},model:{value:(_vm.subnet_type),callback:function ($$v) {_vm.subnet_type=$$v},expression:\"subnet_type\"}},[_vm._v(\"已知IP地址、子网掩码\"),_c('span',{staticClass:\"need_to_calc\"},[_vm._v(\"求网络地址\")])]),_c('el-radio',{attrs:{\"label\":\"2\",\"border\":\"\"},model:{value:(_vm.subnet_type),callback:function ($$v) {_vm.subnet_type=$$v},expression:\"subnet_type\"}},[_vm._v(\"已知网络IP地址、子网掩码\"),_c('span',{staticClass:\"need_to_calc\"},[_vm._v(\"求可划分的子网数和每个子网的子网号\")])]),_c('el-radio',{attrs:{\"label\":\"3\",\"border\":\"\"},model:{value:(_vm.subnet_type),callback:function ($$v) {_vm.subnet_type=$$v},expression:\"subnet_type\"}},[_vm._v(\"已知网络IP地址、所需子网个数\"),_c('span',{staticClass:\"need_to_calc\"},[_vm._v(\"求每个子网的子网掩码及对应的主机地址范围\")])]),_c('el-radio',{attrs:{\"label\":\"4\",\"border\":\"\"},model:{value:(_vm.subnet_type),callback:function ($$v) {_vm.subnet_type=$$v},expression:\"subnet_type\"}},[_vm._v(\"已知网络IP地址、每个子网的需要容纳的主机数\"),_c('span',{staticClass:\"need_to_calc\"},[_vm._v(\"求每个子网的子网掩码、主机地址范围\")])])],1),_c('el-button',{staticStyle:{\"margin-top\":\"12px\"},on:{\"click\":function($event){return _vm.next(_vm.subnet_type)}}},[_vm._v(\"下一步\")])],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <div>\r\n        <div id=\"known_conditions\">\r\n            <el-radio v-model=\"subnet_type\" label=\"1\" border\r\n                >已知IP地址、子网掩码<span class=\"need_to_calc\">求网络地址</span></el-radio\r\n            >\r\n            <el-radio v-model=\"subnet_type\" label=\"2\" border\r\n                >已知网络IP地址、子网掩码<span class=\"need_to_calc\">求可划分的子网数和每个子网的子网号</span></el-radio\r\n            >\r\n            <el-radio v-model=\"subnet_type\" label=\"3\" border\r\n                >已知网络IP地址、所需子网个数<span class=\"need_to_calc\"\r\n                    >求每个子网的子网掩码及对应的主机地址范围</span\r\n                ></el-radio\r\n            >\r\n            <el-radio v-model=\"subnet_type\" label=\"4\" border\r\n                >已知网络IP地址、每个子网的需要容纳的主机数<span class=\"need_to_calc\"\r\n                    >求每个子网的子网掩码、主机地址范围</span\r\n                ></el-radio\r\n            >\r\n        </div>\r\n        <el-button style=\"margin-top: 12px;\" @click=\"next(subnet_type)\">下一步</el-button>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n\r\n    export default {\r\n        name: \"Process1\", // 指定组件名\r\n        data: function () {\r\n            return {\r\n\r\n            }\r\n        },\r\n        computed: {\r\n            subnet_type: {\r\n                get() {\r\n                    return this.$store.state.subnet_type\r\n                },\r\n                set(type) {\r\n                    this.$store.state.subnet_type = type    // type是String类型\r\n                },\r\n            },\r\n        },\r\n        methods: {\r\n            next(subnet_type) {\r\n                if (subnet_type === \"0\") {\r\n                    alert(\"请选择一种子网划分问题的类型\")\r\n                }else {\r\n                    // this.$store.state.active = 1     // subnetting.vue中加入了url path监听, 所以不再需要\r\n                    this.$router.push({name: \"Process2\"})\r\n                }\r\n            },\r\n        },\r\n\r\n    }\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n    #known_conditions {\r\n        width: 30%;\r\n        margin: 50px auto;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: flex-start;\r\n        flex-wrap: wrap;\r\n        .el-radio {\r\n            margin-bottom: 20px;\r\n            text-align: start;\r\n            &:first-child {\r\n                margin-left: 10px;\r\n            }\r\n        }\r\n    }\r\n\r\n    #btn_container {\r\n        position: relative;\r\n        .el-button {\r\n            height: 40px;\r\n            position: absolute;\r\n            left: 0;\r\n            right: 0;\r\n            top: 0;\r\n            bottom: 0;\r\n            margin: 0 auto;\r\n        }\r\n    }\r\n    .need_to_calc {\r\n        color: rgb(207, 41, 41);\r\n        font-weight: bold;\r\n    }\r\n</style>\r\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Process1.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Process1.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Process1.vue?vue&type=template&id=0b6f7d7f&scoped=true&\"\nimport script from \"./Process1.vue?vue&type=script&lang=js&\"\nexport * from \"./Process1.vue?vue&type=script&lang=js&\"\nimport style0 from \"./Process1.vue?vue&type=style&index=0&id=0b6f7d7f&lang=less&scoped=true&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"0b6f7d7f\",\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[(_vm.subnet_type === '0')?_c('div',{attrs:{\"id\":\"miss_subnet_type\"}},[_c('el-empty',{attrs:{\"description\":\"请在步骤1中选择一种问题类型\"}}),_c('el-button',{staticStyle:{\"margin-top\":\"12px\"},on:{\"click\":_vm.pre}},[_vm._v(\"上一步\")])],1):_c('div',{attrs:{\"id\":\"required_conditions\"}},[(_vm.subnet_type === '4')?_c('div',{attrs:{\"id\":\"notice\"}},[_c('span',[_vm._v(\"如果只知道子网中最大的主机数, 则尝试每个子网都填入该数或依次减少其他子网的主机数\")]),_c('br'),_c('br'),_c('span',{staticStyle:{\"color\":\"rgb(65,184,131)\",\"font-weight\":\"bold\",\"font-size\":\"17px\"}},[_vm._v(\" 例如: 有3个地方要用网络, 最多主机的地方总共有16台, 则可以是[16, 16, 16] 或 [16, 12, 10] \")]),_c('br'),_c('br'),_c('span',{staticStyle:{\"color\":\"red\",\"font-weight\":\"bold\",\"font-size\":\"25px\"}},[_vm._v(\"这个工具支持因为子网不能容下所需的主机数而导致需要子网再划分的情况!!!\")])]):_vm._e(),_c('div',{staticClass:\"conditions_group\"},[_c('span',[_vm._v(\"IP地址(仅支持十进制):\")]),_c('el-input',{ref:\"el_input\",style:({ marginLeft: '21px', width: '200px' }),attrs:{\"type\":\"text\",\"placeholder\":\"请输入ip地址\",\"maxlength\":15,\"show-word-limit\":\"\",\"clearable\":true,\"size\":\"small\"},model:{value:(_vm.ip_address),callback:function ($$v) {_vm.ip_address=$$v},expression:\"ip_address\"}})],1),(_vm.subnet_type === '1' || _vm.subnet_type === '2')?_c('div',{staticClass:\"conditions_group\"},[_c('span',{staticStyle:{\"margin-right\":\"20px\"}},[_vm._v(\" 子网掩码(仅支持十进制): \")]),_c('el-autocomplete',{staticClass:\"inline-input\",attrs:{\"fetch-suggestions\":_vm.suggestions,\"placeholder\":\"请输入子网掩码\",\"maxlength\":15,\"show-word-limit\":\"\",\"clearable\":true,\"size\":\"small\"},model:{value:(_vm.subnet_mask),callback:function ($$v) {_vm.subnet_mask=$$v},expression:\"subnet_mask\"}})],1):(_vm.subnet_type === '3')?_c('div',{staticClass:\"conditions_group\"},[_c('span',[_vm._v(\"所需子网个数:\")]),_c('el-input',{style:({ marginLeft: '21px', width: '200px' }),attrs:{\"type\":\"text\",\"placeholder\":\"所需子网个数\",\"maxlength\":15,\"show-word-limit\":\"\",\"clearable\":true,\"size\":\"small\"},model:{value:(_vm.required_subnets_num),callback:function ($$v) {_vm.required_subnets_num=_vm._n($$v)},expression:\"required_subnets_num\"}})],1):_c('div',{staticClass:\"conditions_group\"},[_c('span',[_vm._v(\"每个子网的需容纳的主机数( 传值方式示例: [6, 24, 16, 32, 29] ):\")]),_c('el-input',{style:({ marginLeft: '21px', width: '250px' }),attrs:{\"type\":\"text\",\"placeholder\":\"每个子网的需容纳的主机数\",\"clearable\":true,\"size\":\"small\"},model:{value:(_vm.hosts_num_in_each_subnet),callback:function ($$v) {_vm.hosts_num_in_each_subnet=$$v},expression:\"hosts_num_in_each_subnet\"}})],1),_c('div',{staticClass:\"conditions_group\"},[_c('el-button',{staticStyle:{\"margin-top\":\"12px\"},on:{\"click\":_vm.pre}},[_vm._v(\"上一步\")]),(_vm.subnet_type)?_c('el-button',{staticStyle:{\"margin-top\":\"12px\"},on:{\"click\":function($event){return _vm.next()}}},[_vm._v(\"下一步\")]):_vm._e()],1)])])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <div>\r\n        <div id=\"miss_subnet_type\" v-if=\"subnet_type === '0'\">\r\n            <el-empty description=\"请在步骤1中选择一种问题类型\"></el-empty>\r\n            <el-button style=\"margin-top: 12px;\" @click=\"pre\">上一步</el-button>\r\n        </div>\r\n\r\n        <div id=\"required_conditions\" v-else>\r\n            <div id=\"notice\" v-if=\"subnet_type === '4'\">\r\n                <span>如果只知道子网中最大的主机数, 则尝试每个子网都填入该数或依次减少其他子网的主机数</span>\r\n                <br />\r\n                <br />\r\n\r\n                <span style=\"color: rgb(65,184,131); font-weight: bold; font-size: 17px;\">\r\n                    例如: 有3个地方要用网络, 最多主机的地方总共有16台, 则可以是[16, 16, 16] 或 [16, 12, 10]\r\n                </span>\r\n\r\n                <br />\r\n                <br />\r\n                <span style=\"color: red; font-weight: bold; font-size: 25px;\"\r\n                    >这个工具支持因为子网不能容下所需的主机数而导致需要子网再划分的情况!!!</span\r\n                >\r\n            </div>\r\n\r\n            <div class=\"conditions_group\">\r\n                <span>IP地址(仅支持十进制):</span>\r\n                <el-input\r\n                    type=\"text\"\r\n                    placeholder=\"请输入ip地址\"\r\n                    v-model=\"ip_address\"\r\n                    :maxlength=\"15\"\r\n                    show-word-limit\r\n                    :clearable=\"true\"\r\n                    size=\"small\"\r\n                    :style=\"{ marginLeft: '21px', width: '200px' }\"\r\n                    ref=\"el_input\"\r\n                ></el-input>\r\n            </div>\r\n\r\n            <div class=\"conditions_group\" v-if=\"subnet_type === '1' || subnet_type === '2'\">\r\n                <span style=\"margin-right: 20px;\"> 子网掩码(仅支持十进制): </span>\r\n                <el-autocomplete\r\n                    class=\"inline-input\"\r\n                    v-model=\"subnet_mask\"\r\n                    :fetch-suggestions=\"suggestions\"\r\n                    placeholder=\"请输入子网掩码\"\r\n                    :maxlength=\"15\"\r\n                    show-word-limit\r\n                    :clearable=\"true\"\r\n                    size=\"small\"\r\n                ></el-autocomplete>\r\n            </div>\r\n\r\n            <div class=\"conditions_group\" v-else-if=\"subnet_type === '3'\">\r\n                <span>所需子网个数:</span>\r\n                <el-input\r\n                    type=\"text\"\r\n                    placeholder=\"所需子网个数\"\r\n                    v-model.number=\"required_subnets_num\"\r\n                    :maxlength=\"15\"\r\n                    show-word-limit\r\n                    :clearable=\"true\"\r\n                    size=\"small\"\r\n                    :style=\"{ marginLeft: '21px', width: '200px' }\"\r\n                ></el-input>\r\n            </div>\r\n\r\n            <div class=\"conditions_group\" v-else>\r\n                <span>每个子网的需容纳的主机数( 传值方式示例: [6, 24, 16, 32, 29] ):</span>\r\n                <el-input\r\n                    type=\"text\"\r\n                    placeholder=\"每个子网的需容纳的主机数\"\r\n                    v-model=\"hosts_num_in_each_subnet\"\r\n                    :clearable=\"true\"\r\n                    size=\"small\"\r\n                    :style=\"{ marginLeft: '21px', width: '250px' }\"\r\n                ></el-input>\r\n            </div>\r\n\r\n            <div class=\"conditions_group\">\r\n                <el-button style=\"margin-top: 12px;\" @click=\"pre\">上一步</el-button>\r\n                <el-button style=\"margin-top: 12px;\" v-if=\"subnet_type\" @click=\"next()\">下一步</el-button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import utils from '../../utils'\r\n    import { mapState } from 'vuex'\r\n\r\n    export default {\r\n        name: 'Process2', // 指定组件名\r\n        data: function() {\r\n            return {}\r\n        },\r\n        computed: {\r\n            ...mapState(['subnet_type', 'binOrdec']),\r\n\r\n            ip_address: {\r\n                get() {\r\n                    return this.$store.state.ip_address\r\n                },\r\n                set(val) {\r\n                    // 修复el-input组件的清空功能\r\n                    if (val === '') {\r\n                        this.$store.state.ip_address = val\r\n                        return\r\n                    }\r\n\r\n                    const reg = /(\\.|[0-9]){1}/gi\r\n                    let str_len = val.length\r\n\r\n                    if (reg.test(val[str_len - 1])) {\r\n                        if (val.endsWith('.', str_len - 1) && val.endsWith('.')) return // 不能输入两次. 例如: 192..168\r\n                        this.$store.state.ip_address = val\r\n                    }\r\n\r\n                    // 十进制下, ip输入不能出现超过255的情况\r\n                    if (!this.binOrdec) {\r\n                        utils.address_spliter(val).forEach(fragment => {\r\n                            if (Number(fragment) > 255) {\r\n                                this.$message.closeAll()\r\n                                this.$message({\r\n                                    showClose: true,\r\n                                    message: '请仔细检查ip地址 !!! ',\r\n                                    type: 'error',\r\n                                })\r\n                                return\r\n                            }\r\n                        })\r\n                    }\r\n                },\r\n            },\r\n\r\n            subnet_mask: {\r\n                get() {\r\n                    return this.$store.state.subnet_mask\r\n                },\r\n                set(val) {\r\n                    // 修复el-input组件的清空功能\r\n                    if (val === '') {\r\n                        this.$store.state.subnet_mask = val\r\n                        return\r\n                    }\r\n\r\n                    const reg = /(\\.|[0-9]){1}/gi\r\n                    let str_len = val.length\r\n\r\n                    if (reg.test(val[str_len - 1])) {\r\n                        if (val.endsWith('.', str_len - 1) && val.endsWith('.')) return // 不能输入两次. 例如: 192..168\r\n                        this.$store.state.subnet_mask = val\r\n                    }\r\n\r\n                    // 十进制下, ip输入不能出现超过255的情况\r\n                    if (!this.binOrdec) {\r\n                        utils.address_spliter(val).forEach(fragment => {\r\n                            if (Number(fragment) > 255) {\r\n                                this.$message.closeAll()\r\n                                this.$message({\r\n                                    showClose: true,\r\n                                    message: '请仔细检查子网掩码 !!! ',\r\n                                    type: 'error',\r\n                                })\r\n                                return\r\n                            }\r\n                        })\r\n                    }\r\n                },\r\n            },\r\n\r\n            required_subnets_num: {\r\n                get() {\r\n                    return this.$store.state.required_subnets_num\r\n                },\r\n                set(num) {\r\n                    // 清空\r\n                    if (num === '') {\r\n                        this.$store.state.required_subnets_num = ''\r\n                    } else if (num < 1) {\r\n                        this.$store.state.required_subnets_num = 1\r\n                        alert('所需子网数要大于等于1')\r\n                    } else {\r\n                        this.$store.state.required_subnets_num = num\r\n                    }\r\n                },\r\n            },\r\n            hosts_num_in_each_subnet: {\r\n                get() {\r\n                    return this.$store.state.hosts_num_in_each_subnet\r\n                },\r\n                set(hosts_num_arr) {\r\n                    // 清空\r\n                    if (hosts_num_arr === '') {\r\n                        this.$store.state.hosts_num_in_each_subnet = ''\r\n                    }else {\r\n                        this.$store.state.hosts_num_in_each_subnet = hosts_num_arr\r\n                    }\r\n                },\r\n            }\r\n        },\r\n        methods: {\r\n            // 子网掩码自动填充用\r\n            suggestions(queryString, cb) {\r\n                var advices = this.advices\r\n                var results = queryString ? advices.filter(this.createFilter(queryString)) : advices\r\n                // 调用 callback 返回建议列表的数据\r\n                cb(results)\r\n            },\r\n            createFilter(queryString) {\r\n                return restaurant => {\r\n                    return restaurant.value.toLowerCase().indexOf(queryString.toLowerCase()) === 0\r\n                }\r\n            },\r\n            loadAll() {\r\n                return [{ value: '255.0.0.0' }, { value: '255.255.0.0' }, { value: '255.255.255.0' }]\r\n            },\r\n            // 子网掩码自动填充用\r\n\r\n            pre() {\r\n                // this.$store.state.active = 0     // subnetting.vue中加入了url path监听, 所以不再需要\r\n                this.$router.push({ name: 'Process1' })\r\n            },\r\n            next() {\r\n                // this.$store.state.active = 2     // subnetting.vue中加入了url path监听, 所以不再需要\r\n                if (!this.ip_address || !this.required_subnets_num) {\r\n                    alert('请检查是否漏掉必要的两个条件')\r\n                    return\r\n                }\r\n                this.$router.push({ name: 'Process3' })\r\n            },\r\n        },\r\n        mounted() {\r\n            this.advices = this.loadAll()\r\n        },\r\n    }\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n    #required_conditions {\r\n        .conditions_group {\r\n            display: block;\r\n            margin: 20px auto;\r\n        }\r\n    }\r\n\r\n    #notice {\r\n        margin: 50px auto;\r\n        padding: 15px;\r\n        border: 1px solid rgb(150, 145, 145);\r\n        box-shadow: 7px -5px 10px 0px gray;\r\n    }\r\n</style>\r\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Process2.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Process2.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Process2.vue?vue&type=template&id=4d69ae66&scoped=true&\"\nimport script from \"./Process2.vue?vue&type=script&lang=js&\"\nexport * from \"./Process2.vue?vue&type=script&lang=js&\"\nimport style0 from \"./Process2.vue?vue&type=style&index=0&id=4d69ae66&lang=less&scoped=true&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"4d69ae66\",\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[(_vm.subnet_type === '1')?_c('div',{attrs:{\"id\":\"type1\"}},[_c('el-table',{staticStyle:{\"width\":\"100%\"},attrs:{\"data\":_vm.type1_network_address,\"border\":\"\",\"stripe\":\"\"}},[_c('el-table-column',{attrs:{\"prop\":\"ip\",\"label\":\"ip地址\",\"width\":\"180\",\"align\":\"center\"}}),_c('el-table-column',{attrs:{\"prop\":\"mask\",\"label\":\"子网掩码\",\"width\":\"180\",\"align\":\"center\"}}),_c('el-table-column',{attrs:{\"prop\":\"network_address\",\"label\":\"网络地址\",\"width\":\"180\",\"align\":\"center\"}})],1)],1):(_vm.subnet_type === '2')?_c('div',{attrs:{\"id\":\"type2\"}},[_c('el-table',{staticStyle:{\"width\":\"100%\"},attrs:{\"data\":_vm.type2_dataTable[0],\"border\":\"\",\"stripe\":\"\",\"header-cell-style\":{backgroundColor: '#ffeead', color: '#d9534f'}}},[_c('el-table-column',{attrs:{\"prop\":\"ip\",\"label\":\"分配到的网络ip\",\"width\":\"180\",\"align\":\"center\"}}),_c('el-table-column',{attrs:{\"prop\":\"mask\",\"label\":\"子网掩码\",\"width\":\"180\",\"align\":\"center\"}})],1),_c('el-table',{staticStyle:{\"width\":\"100%\"},attrs:{\"data\":_vm.type2_dataTable[1],\"border\":\"\",\"stripe\":\"\"}},[_c('el-table-column',{attrs:{\"prop\":\"serial_num\",\"label\":\"子网序号\",\"width\":\"180\",\"align\":\"center\"}}),_c('el-table-column',{attrs:{\"prop\":\"cur_subnet_network_address\",\"label\":\"该子网的网络地址\",\"width\":\"180\",\"align\":\"center\"}})],1)],1):(_vm.subnet_type === '3')?_c('div',{attrs:{\"id\":\"type3\"}},[_c('el-table',{staticStyle:{\"width\":\"100%\"},attrs:{\"data\":_vm.type3_dataTable[0],\"border\":\"\",\"stripe\":\"\",\"header-cell-style\":{backgroundColor: '#ffeead', color: '#d9534f'}}},[_c('el-table-column',{attrs:{\"prop\":\"ip\",\"label\":\"分配到的网络ip\",\"width\":\"180\",\"align\":\"center\"}}),_c('el-table-column',{attrs:{\"prop\":\"required_subnets_num\",\"label\":\"所需子网个数\",\"align\":\"center\"}})],1),_c('el-table',{staticStyle:{\"width\":\"100%\"},attrs:{\"data\":_vm.type3_dataTable[1],\"border\":\"\",\"stripe\":\"\",\"header-cell-style\":{color: 'rgb(224, 44, 44)'}}},[_c('el-table-column',{attrs:{\"prop\":\"serial_num\",\"label\":\"子网序号\",\"width\":\"180\",\"align\":\"center\"}}),_c('el-table-column',{attrs:{\"prop\":\"mask\",\"label\":\"子网掩码\",\"width\":\"180\",\"align\":\"center\"}}),_c('el-table-column',{attrs:{\"prop\":\"the_scale_of_host_address\",\"label\":\"主机地址范围(第一个地址可做该子网的网络地址)\",\"width\":\"325\",\"align\":\"center\"}})],1)],1):(_vm.subnet_type === '4')?_c('div',{attrs:{\"id\":\"type4\"}},[_c('div',{attrs:{\"id\":\"type4_info\"}},[_c('el-table',{staticStyle:{\"width\":\"100%\"},attrs:{\"data\":_vm.table_datas_from_hosts_num_in_each_subnet[0],\"border\":\"\",\"stripe\":\"\",\"header-cell-style\":{backgroundColor: '#ffeead', color: '#d9534f'}}},[_c('el-table-column',{attrs:{\"prop\":\"ip\",\"label\":\"分配到的网络ip\",\"align\":\"center\"}})],1)],1),_c('el-table',{staticStyle:{\"width\":\"100%\"},attrs:{\"data\":_vm.type4_dataTable,\"border\":\"\",\"stripe\":\"\",\"header-cell-style\":{backgroundColor: '#ffeead', color: '#d9534f'}}},[_c('el-table-column',{attrs:{\"prop\":\"serial_num\",\"label\":\"子网序号\",\"width\":\"80\",\"align\":\"center\"}}),_c('el-table-column',{attrs:{\"prop\":\"required_host_num\",\"label\":\"要求当前子网能够容纳的主机数\",\"align\":\"center\"}}),_c('el-table-column',{attrs:{\"prop\":\"mask\",\"label\":\"子网掩码\",\"width\":\"127\",\"align\":\"center\"}}),_c('el-table-column',{attrs:{\"prop\":\"the_scale_of_host_address\",\"label\":\"主机地址范围(第一个地址可做该子网的网络地址)\",\"width\":\"325\",\"align\":\"center\"}})],1)],1):_c('div',{attrs:{\"id\":\"miss_subnet_type\"}},[_c('el-empty',{attrs:{\"description\":\"请在步骤1中选择一种问题类型\"}})],1),_c('div',{staticClass:\"conditions_group\"},[_c('el-button',{staticStyle:{\"margin-top\":\"12px\"},on:{\"click\":_vm.pre}},[_vm._v(\"上一步\")])],1)])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <div>\r\n        <div id=\"type1\" v-if=\"subnet_type === '1'\">\r\n            <el-table :data=\"type1_network_address\" border stripe style=\"width: 100%\">\r\n                <el-table-column prop=\"ip\" label=\"ip地址\" width=\"180\" align=\"center\"></el-table-column>\r\n                <el-table-column prop=\"mask\" label=\"子网掩码\" width=\"180\" align=\"center\"></el-table-column>\r\n                <el-table-column prop=\"network_address\" label=\"网络地址\" width=\"180\" align=\"center\"></el-table-column>\r\n            </el-table>\r\n        </div>\r\n\r\n        <div id=\"type2\" v-else-if=\"subnet_type === '2'\">\r\n            <el-table\r\n                :data=\"type2_dataTable[0]\"\r\n                border\r\n                stripe\r\n                style=\"width: 100%\"\r\n                :header-cell-style=\"{backgroundColor: '#ffeead', color: '#d9534f'}\"\r\n            >\r\n                <el-table-column prop=\"ip\" label=\"分配到的网络ip\" width=\"180\" align=\"center\"></el-table-column>\r\n                <el-table-column prop=\"mask\" label=\"子网掩码\" width=\"180\" align=\"center\"></el-table-column>\r\n            </el-table>\r\n\r\n            <el-table :data=\"type2_dataTable[1]\" border stripe style=\"width: 100%\">\r\n                <el-table-column prop=\"serial_num\" label=\"子网序号\" width=\"180\" align=\"center\"></el-table-column>\r\n                <el-table-column\r\n                    prop=\"cur_subnet_network_address\"\r\n                    label=\"该子网的网络地址\"\r\n                    width=\"180\"\r\n                    align=\"center\"\r\n                ></el-table-column>\r\n            </el-table>\r\n        </div>\r\n\r\n        <div id=\"type3\" v-else-if=\"subnet_type === '3'\">\r\n            <el-table\r\n                :data=\"type3_dataTable[0]\"\r\n                border\r\n                stripe\r\n                style=\"width: 100%\"\r\n                :header-cell-style=\"{backgroundColor: '#ffeead', color: '#d9534f'}\"\r\n            >\r\n                <el-table-column prop=\"ip\" label=\"分配到的网络ip\" width=\"180\" align=\"center\"></el-table-column>\r\n                <el-table-column prop=\"required_subnets_num\" label=\"所需子网个数\" align=\"center\"></el-table-column>\r\n            </el-table>\r\n\r\n            <el-table\r\n                :data=\"type3_dataTable[1]\"\r\n                border\r\n                stripe\r\n                style=\"width: 100%\"\r\n                :header-cell-style=\"{color: 'rgb(224, 44, 44)'}\"\r\n            >\r\n                <el-table-column prop=\"serial_num\" label=\"子网序号\" width=\"180\" align=\"center\"></el-table-column>\r\n                <el-table-column prop=\"mask\" label=\"子网掩码\" width=\"180\" align=\"center\"></el-table-column>\r\n                <el-table-column\r\n                    prop=\"the_scale_of_host_address\"\r\n                    label=\"主机地址范围(第一个地址可做该子网的网络地址)\"\r\n                    width=\"325\"\r\n                    align=\"center\"\r\n                ></el-table-column>\r\n            </el-table>\r\n        </div>\r\n\r\n        <div id=\"type4\" v-else-if=\"subnet_type === '4'\">\r\n            <div id=\"type4_info\">\r\n                <el-table\r\n                    :data=\"table_datas_from_hosts_num_in_each_subnet[0]\"\r\n                    border\r\n                    stripe\r\n                    style=\"width: 100%\"\r\n                    :header-cell-style=\"{backgroundColor: '#ffeead', color: '#d9534f'}\"\r\n                >\r\n                    <el-table-column prop=\"ip\" label=\"分配到的网络ip\" align=\"center\"></el-table-column>\r\n                </el-table>\r\n            </div>\r\n\r\n            <el-table\r\n                :data=\"type4_dataTable\"\r\n                border\r\n                stripe\r\n                style=\"width: 100%\"\r\n                :header-cell-style=\"{backgroundColor: '#ffeead', color: '#d9534f'}\"\r\n            >\r\n                <el-table-column prop=\"serial_num\" label=\"子网序号\" width=\"80\" align=\"center\"></el-table-column>\r\n                <el-table-column\r\n                    prop=\"required_host_num\"\r\n                    label=\"要求当前子网能够容纳的主机数\"\r\n                    align=\"center\"\r\n                ></el-table-column>\r\n                <el-table-column prop=\"mask\" label=\"子网掩码\" width=\"127\" align=\"center\"></el-table-column>\r\n                <el-table-column\r\n                    prop=\"the_scale_of_host_address\"\r\n                    label=\"主机地址范围(第一个地址可做该子网的网络地址)\"\r\n                    width=\"325\"\r\n                    align=\"center\"\r\n                ></el-table-column>\r\n            </el-table>\r\n        </div>\r\n\r\n        <div id=\"miss_subnet_type\" v-else>\r\n            <el-empty description=\"请在步骤1中选择一种问题类型\"></el-empty>\r\n        </div>\r\n\r\n        <div class=\"conditions_group\">\r\n            <el-button style=\"margin-top: 12px;\" @click=\"pre\">上一步</el-button>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import { mapState, mapGetters } from 'vuex'\r\n    import { Message } from 'element-ui'\r\n\r\n    export default {\r\n        name: 'Process3', // 指定组件名\r\n        data: function() {\r\n            return {\r\n\r\n            }\r\n        },\r\n        computed: {\r\n            ...mapState([\r\n                'ip_address',\r\n                'subnet_type',\r\n                'hosts_num_in_each_subnet',\r\n            ]),\r\n            ...mapGetters([\r\n                'type1_network_address',\r\n                'type2_dataTable',\r\n                \"type3_dataTable\",\r\n                \"type4_dataTable\",\r\n            ]),\r\n\r\n            table_datas_from_hosts_num_in_each_subnet() {\r\n                try {\r\n                    const hosts_num_in_each_subnet = JSON.parse(this.hosts_num_in_each_subnet)\r\n                    const ip = this.ip_address\r\n\r\n                    let source_table = [\r\n                        [\r\n                            {ip,},\r\n                        ],\r\n                    ]\r\n\r\n                    source_table[1] = hosts_num_in_each_subnet.map(\r\n                        (host_num, index) => {\r\n                            return {\r\n                                serial_num: index + 1,\r\n                                required_host_num: host_num,\r\n                            }\r\n                        }\r\n                    )\r\n                    return source_table\r\n                } catch (error) {\r\n                    Message.closeAll()\r\n                    Message({\r\n                        message: '请仔细检查ip地址和子网主机数传入方式是否有错误!',\r\n                        type: 'error',\r\n                        duration: 1200,\r\n                        showClose: true,\r\n                    })\r\n                    return 0\r\n                }\r\n            },\r\n        },\r\n        methods: {\r\n            pre() {\r\n                this.$router.push({ name: 'Process2' })\r\n            },\r\n        },\r\n    }\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n    .conditions_group {\r\n        display: block;\r\n    }\r\n\r\n    #set_type_style(@num) {\r\n        #type@{num} {\r\n            .el-table {\r\n                margin: 40px auto;\r\n            }\r\n        }\r\n    }\r\n\r\n    each(range(1, 4, 1), #(@the_num){\r\n        #set_type_style(@the_num);\r\n    });\r\n</style>\r\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Process3.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Process3.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Process3.vue?vue&type=template&id=5eb2963c&scoped=true&\"\nimport script from \"./Process3.vue?vue&type=script&lang=js&\"\nexport * from \"./Process3.vue?vue&type=script&lang=js&\"\nimport style0 from \"./Process3.vue?vue&type=style&index=0&id=5eb2963c&lang=less&scoped=true&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"5eb2963c\",\n  null\n  \n)\n\nexport default component.exports","import Vue from 'vue'\r\nimport VueRouter from 'vue-router'\r\n\r\nVue.use(VueRouter)\r\n\r\nimport HelloPage from '../views/HelloPage.vue'\r\nimport IpClass from '../views/IpClass.vue'\r\nimport IpDetails from '../views/IpDetails.vue'\r\nimport IsSameNet from '../views/IsSameNet.vue'\r\nimport NetConfigGen from '../views/NetConfigGen.vue'\r\nimport Subnetting from '../views/Subnetting.vue'\r\nimport Process1 from '../views/subnetting-processes/Process1'\r\nimport Process2 from '../views/subnetting-processes/Process2'\r\nimport Process3 from '../views/subnetting-processes/Process3'\r\n\r\nconst routes = [\r\n    {\r\n        name: 'HelloPage',\r\n        path: '/helloPage',\r\n        component: HelloPage,\r\n    },\r\n    {\r\n        name: 'IpClass',\r\n        path: '/ipClass',\r\n        component: IpClass,\r\n    },\r\n    {\r\n        name: 'IpDetails',\r\n        path: '/ipDetails',\r\n        component: IpDetails,\r\n    },\r\n    {\r\n        name: 'IsSameNet',\r\n        path: '/isSameNet',\r\n        component: IsSameNet,\r\n    },\r\n    {\r\n        name: 'Subnetting',\r\n        path: '/subnetting',\r\n        component: Subnetting,\r\n        redirect: '/subnetting/process1',\r\n        children: [\r\n            {\r\n                name: 'Process1',\r\n                path: 'process1',\r\n                component: Process1,\r\n            },\r\n            {\r\n                name: 'Process2',\r\n                path: 'process2',\r\n                component: Process2,\r\n            },\r\n            {\r\n                name: 'Process3',\r\n                path: 'process3',\r\n                component: Process3,\r\n            },\r\n        ],\r\n    },\r\n    {\r\n        name: 'NetConfigGen',\r\n        path: '/netConfigGen',\r\n        component: NetConfigGen,\r\n    },\r\n    {\r\n        path: '/',\r\n        redirect: '/helloPage',\r\n    },\r\n]\r\n\r\nconst router = new VueRouter({\r\n    routes,\r\n})\r\n\r\nexport default router\r\n","export default {}\r\n","export default {\r\n    ip_address: '',\r\n    subnet_mask: '',\r\n    ip_address2: '', // <判断两ip是否属于同一个网络>路由专用\r\n    subnet_mask2: '', // <判断两ip是否属于同一个网络>路由专用\r\n    binOrdec: false, // false为10进制, true为2进制\r\n\r\n    // ======================== 路由4(子网划分)  开始 ========================\r\n    active: 0, // 子网划分的步骤条\r\n    subnet_type: '0', // 子网划分的问题类型, 总共有4种\r\n    required_subnets_num: 1, // 所需子网数\r\n    hosts_num_in_each_subnet: '', // 每个子网需要能容纳的主机数\r\n    // ======================== 路由4(子网划分)  结束 ========================\r\n}\r\n","export default {}\r\n","import utils from '../utils'\r\nimport { Message } from 'element-ui'\r\nimport Vue from 'vue'\r\n\r\nexport default {\r\n    // ======================= 路由1: 判断ip地址类型 ========================\r\n    ipClass(state) {\r\n        try {\r\n            let { ip_address, binOrdec } = state\r\n            if (ip_address === '') return\r\n            return utils.ipClassifier(ip_address, binOrdec)\r\n        } catch (e) {\r\n            // 如果之前有错误提示, 先清空, 让界面中永远只有一个错误提示弹框\r\n            Message.closeAll()\r\n            Message({\r\n                message: '请仔细检查ip地址和子网掩码是否有错误!',\r\n                type: 'error',\r\n                duration: 1200,\r\n                showClose: true,\r\n            })\r\n            return\r\n        }\r\n    },\r\n    // ======================= 路由1: 判断ip地址类型 ========================\r\n\r\n    // ======================= 路由2: IP地址详情 (需要子网掩码) ========================\r\n\r\n    // 1. ip地址的对立进制 2进制=>10进制, 反之...\r\n    convert_ip_address(state) {\r\n        try {\r\n            let { ip_address, subnet_mask, binOrdec } = state\r\n            if (ip_address === '' || subnet_mask === '') return\r\n            if (binOrdec) {\r\n                // 十进制形式的结果\r\n                return utils.dec_ip_address(ip_address)\r\n            } else {\r\n                // 二进制形式的结果\r\n                return utils.bin_ip_address(ip_address)\r\n            }\r\n        } catch (error) {\r\n            Message.closeAll()\r\n            Message({\r\n                message: '请仔细检查ip地址和子网掩码是否有错误!',\r\n                type: 'error',\r\n                duration: 1200,\r\n                showClose: true,\r\n            })\r\n            return\r\n        }\r\n    },\r\n\r\n    // 2. 子网号位数\r\n    bits_of_subnet(state, getters) {\r\n        try {\r\n            let { ip_address, subnet_mask } = state\r\n            let { ipClass } = getters\r\n\r\n            if (ip_address === '' || ipClass === undefined || subnet_mask === '') return\r\n            return utils.bits_of_subnet(ipClass, subnet_mask)\r\n        } catch (error) {\r\n            Message.closeAll()\r\n            Message({\r\n                message: '请仔细检查ip地址和子网掩码是否有错误!',\r\n                type: 'error',\r\n                duration: 1200,\r\n                showClose: true,\r\n            })\r\n            return\r\n        }\r\n    },\r\n\r\n    // 3-4. 可用子网数 (结果包含: 新版路由器 + 旧版路由器)\r\n    num_of_subnet(state, getters) {\r\n        try {\r\n            let { bits_of_subnet } = getters\r\n            if (bits_of_subnet === undefined) return 0\r\n            return utils.num_of_subnet(bits_of_subnet)\r\n        } catch (error) {\r\n            Message.closeAll()\r\n            Message({\r\n                message: '请仔细检查ip地址和子网掩码是否有错误!',\r\n                type: 'error',\r\n                duration: 1200,\r\n                showClose: true,\r\n            })\r\n            return\r\n        }\r\n    },\r\n\r\n    // 5. 主机号位数\r\n    bits_of_hosts(state, getters) {\r\n        try {\r\n            let { ip_address, subnet_mask } = state\r\n            let { ipClass } = getters\r\n\r\n            if (ip_address === '' || ipClass === undefined || subnet_mask === '') return\r\n\r\n            return utils.bits_of_hosts(ipClass, subnet_mask)\r\n        } catch (error) {\r\n            Message.closeAll()\r\n            Message({\r\n                message: '请仔细检查ip地址和子网掩码是否有错误!',\r\n                type: 'error',\r\n                duration: 1200,\r\n                showClose: true,\r\n            })\r\n            return\r\n        }\r\n    },\r\n\r\n    // 6. 主机号(10进制)\r\n    host_number_in_dec(state, getters) {\r\n        try {\r\n            let result = utils.address_spliter(getters.host_number_in_bin).map(fragment => utils.bin2dec(fragment))\r\n            return utils.address_joiner(result)\r\n        } catch (error) {\r\n            Message.closeAll()\r\n            Message({\r\n                message: '请仔细检查ip地址和子网掩码是否有错误!',\r\n                type: 'error',\r\n                duration: 1200,\r\n                showClose: true,\r\n            })\r\n            return\r\n        }\r\n    },\r\n\r\n    // 7. 主机号(2进制)\r\n    host_number_in_bin(state, getters) {\r\n        try {\r\n            let { binOrdec, subnet_mask: mask } = state\r\n\r\n            if (binOrdec) {\r\n                var ip = state.ip_address\r\n            } else {\r\n                var ip = getters.convert_ip_address\r\n            }\r\n\r\n            if (ip === '' || mask === '') return\r\n\r\n            return utils.host_number_in_bin(ip, mask)\r\n        } catch (error) {\r\n            Message.closeAll()\r\n            Message({\r\n                message: '请仔细检查ip地址和子网掩码是否有错误!',\r\n                type: 'error',\r\n                duration: 1200,\r\n                showClose: true,\r\n            })\r\n            return\r\n        }\r\n    },\r\n\r\n    // 8. 主机数\r\n    hosts(state, getters) {\r\n        try {\r\n            let { bits_of_hosts } = getters\r\n            if (bits_of_hosts > 0) {\r\n                return 2 ** bits_of_hosts\r\n            } else if (bits_of_hosts === undefined) {\r\n                return\r\n            } else {\r\n                return 0\r\n            }\r\n        } catch (error) {\r\n            Message.closeAll()\r\n            Message({\r\n                message: '请仔细检查ip地址和子网掩码是否有错误!',\r\n                type: 'error',\r\n                duration: 1200,\r\n                showClose: true,\r\n            })\r\n            return\r\n        }\r\n    },\r\n\r\n    // 9. 可用主机数\r\n    useful_hosts(state, getters) {\r\n        try {\r\n            let hosts = getters.hosts\r\n            if (hosts > 0) {\r\n                return hosts - 2\r\n            } else if (hosts === undefined) {\r\n                return\r\n            } else {\r\n                return 0\r\n            }\r\n        } catch (error) {\r\n            Message.closeAll()\r\n            Message({\r\n                message: '请仔细检查ip地址和子网掩码是否有错误!',\r\n                type: 'error',\r\n                duration: 1200,\r\n                showClose: true,\r\n            })\r\n            return\r\n        }\r\n    },\r\n\r\n    // 10. 网络地址(10进制)\r\n    network_address_dec(state, getters) {\r\n        try {\r\n            let { network_address_bin } = getters\r\n            return utils.dec_ip_address(network_address_bin)\r\n        } catch (error) {\r\n            Message.closeAll()\r\n            Message({\r\n                message: '请仔细检查ip地址和子网掩码是否有错误!',\r\n                type: 'error',\r\n                duration: 1200,\r\n                showClose: true,\r\n            })\r\n            return\r\n        }\r\n    },\r\n\r\n    // 11. 网络地址(2进制)\r\n    network_address_bin(state, getters) {\r\n        try {\r\n            let { ip_address, subnet_mask, binOrdec } = state\r\n            if (ip_address === '' || subnet_mask === '') return\r\n\r\n            if (!binOrdec) {\r\n                ip_address = getters.convert_ip_address\r\n            }\r\n\r\n            let subnet_mask_arr = utils.bin_ip_address(subnet_mask)\r\n\r\n            return utils.AND_operation(ip_address, subnet_mask_arr)\r\n        } catch (error) {\r\n            Message.closeAll()\r\n            Message({\r\n                message: '请仔细检查ip地址和子网掩码是否有错误!',\r\n                type: 'error',\r\n                duration: 1200,\r\n                showClose: true,\r\n            })\r\n            return\r\n        }\r\n    },\r\n\r\n    // 12. 主机地址范围(10进制)\r\n    host_address_dec(state, getters) {\r\n        try {\r\n            let { ip_address } = state\r\n            let { bits_of_subnet } = getters\r\n\r\n            return utils.calc_host_address(ip_address, bits_of_subnet)\r\n        } catch (error) {\r\n            Message.closeAll()\r\n            Message({\r\n                message: '请仔细检查ip地址和子网掩码是否有错误!',\r\n                type: 'error',\r\n                duration: 1200,\r\n                showClose: true,\r\n            })\r\n            return\r\n        }\r\n    },\r\n    // 13. 主机地址范围(2进制)\r\n    host_address_bin(state, getters) {\r\n        try {\r\n            let { host_address_dec } = getters\r\n            const start_and_end_Arr = host_address_dec.split(' ~ ')\r\n            let start = utils.bin_ip_address(start_and_end_Arr[0])\r\n            let end = utils.bin_ip_address(start_and_end_Arr[1])\r\n\r\n            return `${start} ~ ${end}`\r\n        } catch (error) {\r\n            Message.closeAll()\r\n            Message({\r\n                message: '请仔细检查ip地址和子网掩码是否有错误!',\r\n                type: 'error',\r\n                duration: 1200,\r\n                showClose: true,\r\n            })\r\n            return\r\n        }\r\n    },\r\n\r\n    // ======================= 路由2: IP地址详情 (需要子网掩码) ========================\r\n\r\n    // ======================= 路由3: 判断两个ip是否属于同一个网络 ======================\r\n    calc_network_address() {\r\n        return function (ip_address, subnet_mask) {\r\n            try {\r\n                if (ip_address === '' || subnet_mask === '') return\r\n\r\n                // 将ip转为二进制\r\n                let ip_address_bin = utils.patchZero(utils.bin_ip_address(ip_address))\r\n\r\n                // 将子网掩码转为二进制\r\n                let subnet_mask_arr = utils.bin_ip_address(subnet_mask)\r\n\r\n                let network_address_dec = utils.dec_ip_address(utils.AND_operation(ip_address_bin, subnet_mask_arr))\r\n\r\n                return network_address_dec\r\n            } catch (error) {\r\n                Message.closeAll()\r\n                Message({\r\n                    message: '请仔细检查ip地址和子网掩码是否有错误!',\r\n                    type: 'error',\r\n                    duration: 1200,\r\n                    showClose: true,\r\n                })\r\n                return\r\n            }\r\n        }\r\n    },\r\n    network_address_1(state, getters) {\r\n        let { ip_address, subnet_mask } = state\r\n        let { calc_network_address } = getters\r\n\r\n        return calc_network_address(ip_address, subnet_mask)\r\n    },\r\n    network_address_2(state, getters) {\r\n        let { ip_address2, subnet_mask2 } = state\r\n        let { calc_network_address } = getters\r\n\r\n        return calc_network_address(ip_address2, subnet_mask2)\r\n    },\r\n\r\n    // ======================= 路由3: 判断两个ip是否属于同一个网络 ======================\r\n\r\n    // ========================== 路由4: 子网划分 ==============================\r\n\r\n    /*\r\n        @author:  Fitz\r\n        @name:  calc_the_num_of_subnets_and_its_network_address\r\n        @description:  根据ip和子网掩码计算出子网个数和每个子网的网络地址\r\n        @parms:  String ip地址    String 子网掩码\r\n        @return:  Object\r\n                    [\r\n                        [\r\n                            {\r\n                                ip: ip_address,\r\n                                mask: subnet_mask,\r\n                            }\r\n                        ],\r\n                        \r\n                        [\r\n                            {\r\n                                serial_num: \"1\",\r\n                                cur_subnet_network_address: \"111111\",\r\n                            }\r\n                        ]\r\n                    ]\r\n    */\r\n    calc_the_num_of_subnets_and_its_network_address() {\r\n        return function (ip_address, subnet_mask) {\r\n            try {\r\n                if (ip_address === '' || subnet_mask === '') return\r\n\r\n                // 最终结果都将被保存到该数组中\r\n                let final_results = [\r\n                    // type2_dataTable[0]\r\n                    [\r\n                        {\r\n                            ip: ip_address,\r\n                            mask: subnet_mask,\r\n                        },\r\n                    ],\r\n\r\n                    // type2_dataTable[1]\r\n                    [],\r\n                ]\r\n\r\n                let ipClass = utils.ipClassifier(ip_address)\r\n                let flag = utils.standard_mask[ipClass]['flag'] // 根据ip类型确定子网号开始统计的部分\r\n\r\n                let ip_address_bin_arr = utils.address_spliter(utils.bin_ip_address(ip_address))\r\n\r\n                ip_address_bin_arr = ip_address_bin_arr.slice(0, flag)\r\n\r\n                let mask_bin_arr = utils.address_spliter(utils.bin_ip_address(subnet_mask))\r\n\r\n                mask_bin_arr = mask_bin_arr.slice(flag)\r\n\r\n                // 得到子网掩码中1的位数\r\n                let bit_is_one_counter = (() => {\r\n                    let counter = 0\r\n                    for (let i = 0, len = mask_bin_arr.length; i < len; i++) {\r\n                        for (const bit of mask_bin_arr[i]) {\r\n                            if (bit === '1') {\r\n                                counter++\r\n                            } else {\r\n                                break\r\n                            }\r\n                        }\r\n                    }\r\n                    return counter\r\n                })()\r\n\r\n                let bit_combine_arr = utils.bit_combination_generator(bit_is_one_counter)\r\n                bit_combine_arr = bit_combine_arr.map(combine => {\r\n                    while (combine.length < (4 - ip_address_bin_arr.length) * 8) {\r\n                        combine.push('0')\r\n                    }\r\n                    return combine\r\n                })\r\n\r\n                for (let i = 0, len = bit_combine_arr.length; i < len; i++) {\r\n                    const type2_dataTable2 = {\r\n                        serial_num: i + 1,\r\n                    }\r\n\r\n                    let cur = bit_combine_arr[i]\r\n                    let decompose = utils.arr_vector_one_to_two(8, cur)\r\n\r\n                    let cur_subnet_network_address = [...ip_address_bin_arr] // 深复制一份ip, 不影响原ip\r\n\r\n                    decompose.forEach(item => {\r\n                        item = item.join('')\r\n                        cur_subnet_network_address.push(item)\r\n                    })\r\n\r\n                    cur_subnet_network_address = cur_subnet_network_address\r\n                        .map(fragment => utils.bin2dec(fragment))\r\n                        .join('.')\r\n\r\n                    type2_dataTable2['cur_subnet_network_address'] = cur_subnet_network_address\r\n\r\n                    final_results[1].push(type2_dataTable2)\r\n                }\r\n\r\n                return final_results\r\n            } catch (error) {\r\n                Message.closeAll()\r\n                Message({\r\n                    message: '请仔细检查ip地址和子网掩码是否有错误!',\r\n                    type: 'error',\r\n                    duration: 1200,\r\n                    showClose: true,\r\n                })\r\n                return\r\n            }\r\n        }\r\n    },\r\n    // ========================== 问题1: 根据ip、子网掩码求网络地址  ===============================\r\n    type1_network_address(state, getters) {\r\n        let { ip_address, subnet_mask } = state\r\n        let { calc_network_address } = getters\r\n        return [\r\n            {\r\n                ip: ip_address,\r\n                mask: subnet_mask,\r\n                network_address: calc_network_address(ip_address, subnet_mask),\r\n            },\r\n        ]\r\n    },\r\n    // ==================== 问题2: 根据ip、子网掩码求能分配的子网数及每个子网的网络地址 =============\r\n    type2_dataTable(state, getters) {\r\n        let { ip_address, subnet_mask } = state\r\n        let { calc_the_num_of_subnets_and_its_network_address } = getters\r\n        return calc_the_num_of_subnets_and_its_network_address(ip_address, subnet_mask)\r\n    },\r\n    // =================== 问题3: 已知网络IP地址、所需子网个数求每个子网的子网掩码及对应的主机地址范围 =================\r\n    type3_dataTable(state, getters) {\r\n        let { ip_address: ip, required_subnets_num } = state\r\n        let { calc_the_num_of_subnets_and_its_network_address } = getters\r\n\r\n        let final_results = [\r\n            [\r\n                {\r\n                    ip,\r\n                    required_subnets_num,\r\n                },\r\n            ],\r\n        ]\r\n\r\n        // 子网掩码需要用于做子网号的bit数\r\n        let required_bit = Math.ceil(Math.log2(required_subnets_num))\r\n\r\n        const ipClass = utils.ipClassifier(ip)\r\n        const flag = utils.standard_mask[ipClass]['flag']\r\n\r\n        // 子网掩码计算结果将基于这个变量进行修改\r\n        let temp_mask_bin_arr = utils.address_spliter(utils.bin_ip_address(utils.standard_mask[ipClass]['mask'])) // 该数组是2进制形式的标准子网掩码\r\n        temp_mask_bin_arr.splice(flag)\r\n\r\n        var patcher = []\r\n        for (let i = 0; i < required_bit; i++) {\r\n            patcher.push('1')\r\n        }\r\n\r\n        while ((4 - temp_mask_bin_arr.length) * 8 !== patcher.length) {\r\n            patcher.push('0')\r\n        }\r\n\r\n        patcher = utils.arr_vector_one_to_two(8, patcher).map(bit_arr => bit_arr.join(''))\r\n        let mask_bin_arr = [...temp_mask_bin_arr, ...patcher]\r\n        let mask = utils.address_joiner(mask_bin_arr.map(fragment => utils.bin2dec(fragment)))\r\n\r\n        let c = calc_the_num_of_subnets_and_its_network_address(ip, mask)[1]\r\n\r\n        c = c.map(obj => {\r\n            return {\r\n                mask,\r\n                serial_num: obj.serial_num,\r\n                the_scale_of_host_address: utils.calc_host_address(obj.cur_subnet_network_address, required_bit),\r\n            }\r\n        })\r\n\r\n        final_results[1] = c\r\n        return final_results\r\n    },\r\n\r\n    // ================================= 问题4: 已知网络IP地址、每个子网的需要容纳的主机数求每个子网的子网掩码、主机地址范围 ===================================\r\n\r\n    /*\r\n        @author:  Fitz\r\n        @name:  calc_mask\r\n        @description:  根据十进制ip地址和子网号位数\r\n        @parms:  String ip地址(十进制)    Number 子网号位数\r\n        @return:  String 子网掩码\r\n    */\r\n    calc_mask() {\r\n        return function (ip_address, required_bit) {\r\n            const ipClass = utils.ipClassifier(ip_address)\r\n            let { mask, flag } = utils.standard_mask[ipClass]\r\n            // 子网掩码计算结果将基于这个变量进行修改\r\n            let temp_mask_bin_arr = utils.address_spliter(utils.bin_ip_address(mask))\r\n            temp_mask_bin_arr.splice(flag)\r\n\r\n            var patcher = []\r\n            for (let i = 0; i < required_bit; i++) {\r\n                patcher.push('1')\r\n            }\r\n\r\n            while ((4 - temp_mask_bin_arr.length) * 8 !== patcher.length) {\r\n                patcher.push('0')\r\n            }\r\n\r\n            patcher = utils.arr_vector_one_to_two(8, patcher).map(bit_arr => bit_arr.join(''))\r\n            let mask_bin_arr = [...temp_mask_bin_arr, ...patcher]\r\n\r\n            // 计算出的满足当前所需子网下的子网掩码\r\n            let mask_after_calc = utils.address_joiner(mask_bin_arr.map(fragment => utils.bin2dec(fragment)))\r\n\r\n            return mask_after_calc\r\n        }\r\n    },\r\n\r\n    type4_dataTable(state, getters) {\r\n        try {\r\n            // 最终结果都保存在该容器中\r\n            let final_results = []\r\n\r\n            let { ip_address, hosts_num_in_each_subnet } = state\r\n            let { calc_mask, calc_the_num_of_subnets_and_its_network_address } = getters\r\n            // ip类型\r\n            let ipClass = utils.ipClassifier(ip_address)\r\n            // 该ip类型下子网号开始操作的位置\r\n            let { flag } = utils.standard_mask[ipClass]\r\n            // 每个子网需要容纳的主机数 -- 数组\r\n            let hosts_num_in_each_subnet_arr = JSON.parse(hosts_num_in_each_subnet)\r\n            // 满足每个子网容纳的主机数需要的子网号位数 -- 数组\r\n            let bits_of_subnet_Arr = hosts_num_in_each_subnet_arr.map(host_num =>\r\n                utils.required_bits_for_subnets_from_host_nums(ipClass, host_num)\r\n            )\r\n\r\n            bits_of_subnet_Arr.forEach((num_of_subnets_bits, index) => {\r\n                let r = {}\r\n\r\n                // 计算出正确的子网掩码(满足子网数和每个子网需要能够容纳的主机数)\r\n                let mask = calc_mask(ip_address, num_of_subnets_bits)\r\n\r\n                let network_addresses_container = calc_the_num_of_subnets_and_its_network_address(ip_address, mask)[1]\r\n                let cur_network_address = network_addresses_container[index]['cur_subnet_network_address']\r\n\r\n                // 每个子网的序号\r\n                r.serial_num = index + 1\r\n                // 每个子网的子网掩码\r\n                r.mask = mask\r\n                // 每个子网需要容纳的主机数\r\n                r.required_host_num = hosts_num_in_each_subnet_arr[index]\r\n                // 每个子网的主机地址范围\r\n                r.the_scale_of_host_address = utils.calc_host_address(cur_network_address, num_of_subnets_bits)\r\n                final_results.push(r)\r\n            })\r\n\r\n            // 判断是否要修复bug\r\n            const need_to_repair = utils.array_remove_duplicates(final_results.map(subnet => subnet.mask)).length\r\n\r\n            // 需要修复\r\n            if (need_to_repair > 1) {\r\n                // ========================= 修复子网掩码不同导致的主机地址范围重叠bug =================\r\n\r\n                // 主机地址范围结果集\r\n                let the_scale_of_host_address_Arr = []\r\n\r\n                for (let i = 0, len = final_results.length; i < len; i++) {\r\n                    const subnet = final_results[i]\r\n                    let scale = subnet.the_scale_of_host_address\r\n                    the_scale_of_host_address_Arr.push(scale.split(' ~ '))\r\n                }\r\n\r\n                // 开始修复\r\n                let repair = the_scale_of_host_address_Arr.map((scale_arr, index, thisArr) => {\r\n                    let end = utils.address_spliter(scale_arr[1])\r\n\r\n                    let lastest_pos = end[flag]\r\n                    if (index !== thisArr.length - 1) {\r\n                        let next_subnet = thisArr[index + 1]\r\n                        let start = utils.address_spliter(next_subnet[0])\r\n                        let end = utils.address_spliter(next_subnet[1])\r\n                        // 计算出间隔\r\n                        const gap = end[flag] - start[flag]\r\n                        start[flag] = +lastest_pos + 1\r\n                        end[flag] = +lastest_pos + 1 + gap\r\n\r\n                        next_subnet[0] = utils.address_joiner(start)\r\n                        next_subnet[1] = utils.address_joiner(end)\r\n                    }\r\n                    return scale_arr.join(' ~ ')\r\n                })\r\n\r\n                repair.forEach((scale, index) => {\r\n                    Vue.set(final_results, index, {\r\n                        serial_num: final_results[index].serial_num,\r\n                        mask: final_results[index].mask,\r\n                        required_host_num: final_results[index].required_host_num,\r\n                        the_scale_of_host_address: scale,\r\n                    })\r\n                })\r\n                // ========================= 修复子网掩码不同导致的主机地址范围重叠bug =================\r\n            }\r\n            return final_results\r\n        } catch (error) {\r\n            Message.closeAll()\r\n            Message({\r\n                message: '请仔细检查ip地址和子网掩码是否有错误!',\r\n                type: 'error',\r\n                duration: 1200,\r\n                showClose: true,\r\n            })\r\n            return\r\n        }\r\n    },\r\n    // ========================== 路由4: 子网划分 ==============================\r\n}\r\n","import Vue from 'vue'\r\nimport Vuex from 'vuex'\r\n\r\nVue.use(Vuex)\r\n\r\nimport actions from './actions'\r\nimport state from './state'\r\nimport mutations from './mutations'\r\nimport getters from './getters'\r\n\r\nexport default new Vuex.Store({\r\n    state,\r\n    actions,\r\n    mutations,\r\n    getters,\r\n})\r\n","import Vue from 'vue'\nimport App from './App.vue'\nimport router from './router'\nimport store from './store'\nimport ElementUI from 'element-ui'\nimport 'element-ui/lib/theme-chalk/index.css'\n\nVue.use(ElementUI)\n\nVue.config.productionTip = false\n\nnew Vue({\n    router,\n    store,\n    render: h => h(App),\n}).$mount('#app')\n","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--10-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--10-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--10-oneOf-1-2!../../node_modules/less-loader/dist/cjs.js??ref--10-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Nav.vue?vue&type=style&index=0&id=5c28dd22&lang=less&scoped=true&\"","export * from \"-!../node_modules/mini-css-extract-plugin/dist/loader.js??ref--10-oneOf-1-0!../node_modules/css-loader/dist/cjs.js??ref--10-oneOf-1-1!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/postcss-loader/src/index.js??ref--10-oneOf-1-2!../node_modules/less-loader/dist/cjs.js??ref--10-oneOf-1-3!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=style&index=0&lang=less&\"","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--10-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--10-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--10-oneOf-1-2!../../../node_modules/less-loader/dist/cjs.js??ref--10-oneOf-1-3!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Process3.vue?vue&type=style&index=0&id=5eb2963c&lang=less&scoped=true&\"","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--10-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--10-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--10-oneOf-1-2!../../node_modules/less-loader/dist/cjs.js??ref--10-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./IsSameNet.vue?vue&type=style&index=0&id=759eb8ce&lang=less&scoped=true&\"","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--10-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--10-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--10-oneOf-1-2!../../node_modules/less-loader/dist/cjs.js??ref--10-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./NetConfigGen.vue?vue&type=style&index=0&id=b12fcb7a&lang=less&scoped=true&\"","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--10-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--10-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--10-oneOf-1-2!../../node_modules/less-loader/dist/cjs.js??ref--10-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Subnetting.vue?vue&type=style&index=0&id=c67a9bd2&lang=less&scoped=true&\"","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--10-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--10-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--10-oneOf-1-2!../../node_modules/less-loader/dist/cjs.js??ref--10-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./HelloPage.vue?vue&type=style&index=0&id=388180a2&lang=less&scoped=true&\"","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--10-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--10-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--10-oneOf-1-2!../../../node_modules/less-loader/dist/cjs.js??ref--10-oneOf-1-3!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Process1.vue?vue&type=style&index=0&id=0b6f7d7f&lang=less&scoped=true&\"","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--10-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--10-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--10-oneOf-1-2!../../../node_modules/less-loader/dist/cjs.js??ref--10-oneOf-1-3!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Process2.vue?vue&type=style&index=0&id=4d69ae66&lang=less&scoped=true&\"","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--10-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--10-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--10-oneOf-1-2!../../node_modules/less-loader/dist/cjs.js??ref--10-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./IpClass.vue?vue&type=style&index=0&id=0cf9e036&lang=less&scoped=true&\""],"sourceRoot":""}